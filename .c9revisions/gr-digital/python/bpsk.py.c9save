{"ts":1360099665344,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#\n# Copyright 2005,2006,2011 Free Software Foundation, Inc.\n# \n# This file is part of GNU Radio\n# \n# GNU Radio is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3, or (at your option)\n# any later version.\n# \n# GNU Radio is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# \n# You should have received a copy of the GNU General Public License\n# along with GNU Radio; see the file COPYING.  If not, write to\n# the Free Software Foundation, Inc., 51 Franklin Street,\n# Boston, MA 02110-1301, USA.\n# \n\n\"\"\"\nBPSK modulation and demodulation.\n\"\"\"\n\nfrom math import pi, log\nfrom cmath import exp\n\nfrom gnuradio import gr\nfrom gnuradio.digital.generic_mod_demod import generic_mod, generic_demod\nimport digital_swig\nimport modulation_utils\n\n# Default number of points in constellation.\n_def_constellation_points = 2\n# Whether differential coding is used.\n_def_differential = False\n\n# /////////////////////////////////////////////////////////////////////////////\n#                           BPSK constellation\n# /////////////////////////////////////////////////////////////////////////////\n\ndef bpsk_constellation(m=_def_constellation_points):\n    if m != _def_constellation_points:\n        raise ValueError(\"BPSK can only have 2 constellation points.\")\n    return digital_swig.constellation_bpsk()\n\n# /////////////////////////////////////////////////////////////////////////////\n#                           BPSK modulator\n# /////////////////////////////////////////////////////////////////////////////\n\nclass bpsk_mod(generic_mod):\n\n    def __init__(self, constellation_points=_def_constellation_points,\n                 differential=False, *args, **kwargs):\n\n        \"\"\"\n\tHierarchical block for RRC-filtered BPSK modulation.\n\n\tThe input is a byte stream (unsigned char) and the\n\toutput is the complex modulated signal at baseband.\n\n        See generic_mod block for list of parameters.\n\t\"\"\"\n\n        constellation_points = _def_constellation_points\n        constellation = digital_swig.constellation_bpsk()\n        if constellation_points != 2:\n            raise ValueError('Number of constellation points must be 2 for BPSK.')\n        super(bpsk_mod, self).__init__(constellation=constellation,\n                                       differential=differential, *args, **kwargs)\n        \n# /////////////////////////////////////////////////////////////////////////////\n#                           BPSK demodulator\n#\n# /////////////////////////////////////////////////////////////////////////////\n\nclass bpsk_demod(generic_demod):\n\n    def __init__(self, constellation_points=_def_constellation_points,\n                 differential=False, *args, **kwargs):\n\n        \"\"\"\n\tHierarchical block for RRC-filtered BPSK modulation.\n\n\tThe input is a byte stream (unsigned char) and the\n\toutput is the complex modulated signal at baseband.\n\n        See generic_demod block for list of parameters.\n        \"\"\"\n\n        constellation_points = _def_constellation_points\n        constellation = digital_swig.constellation_bpsk()\n        if constellation_points != 2:\n            raise ValueError('Number of constellation points must be 2 for BPSK.')\n        super(bpsk_demod, self).__init__(constellation=constellation,\n                                         differential=differential, *args, **kwargs)\n\n\n\n# /////////////////////////////////////////////////////////////////////////////\n#                           DBPSK constellation\n# /////////////////////////////////////////////////////////////////////////////\n\ndef dbpsk_constellation(m=_def_constellation_points):\n    if m != _def_constellation_points:\n        raise ValueError(\"DBPSK can only have 2 constellation points.\")\n    return digital_swig.constellation_dbpsk()\n\n# /////////////////////////////////////////////////////////////////////////////\n#                           DBPSK modulator\n# /////////////////////////////////////////////////////////////////////////////\n\nclass dbpsk_mod(generic_mod):\n\n    def __init__(self, constellation_points=_def_constellation_points,\n                 differential=True, *args, **kwargs):\n\n        \"\"\"\n\tHierarchical block for RRC-filtered DBPSK modulation.\n\n\tThe input is a byte stream (unsigned char) and the\n\toutput is the complex modulated signal at baseband.\n\n        See generic_mod block for list of parameters.\n\t\"\"\"\n\n        constellation_points = _def_constellation_points\n        constellation = digital_swig.constellation_bpsk()\n        if constellation_points != 2:\n            raise ValueError('Number of constellation points must be 2 for DBPSK.')\n        super(dbpsk_mod, self).__init__(constellation=constellation,\n                                        differential=True,\n                                        *args, **kwargs)\n\n# /////////////////////////////////////////////////////////////////////////////\n#                           DBPSK demodulator\n#\n# /////////////////////////////////////////////////////////////////////////////\n\nclass dbpsk_demod(generic_demod):\n\n    def __init__(self, constellation_points=_def_constellation_points,\n                 differential=True, *args, **kwargs):\n\n        \"\"\"\n\tHierarchical block for RRC-filtered DBPSK modulation.\n\n\tThe input is a byte stream (unsigned char) and the\n\toutput is the complex modulated signal at baseband.\n\n        See generic_demod block for list of parameters.\n        \"\"\"\n\n        constellation_points = _def_constellation_points\n        constellation = digital_swig.constellation_bpsk()\n        if constellation_points != 2:\n            raise ValueError('Number of constellation points must be 2 for DBPSK.')\n        super(dbpsk_demod, self).__init__(constellation=constellation,\n                                          differential=True,\n                                          *args, **kwargs)\n\n#\n# Add these to the mod/demod registry\n#\nmodulation_utils.add_type_1_mod('bpsk', bpsk_mod)\nmodulation_utils.add_type_1_demod('bpsk', bpsk_demod)\nmodulation_utils.add_type_1_constellation('bpsk', bpsk_constellation)\nmodulation_utils.add_type_1_mod('dbpsk', dbpsk_mod)\nmodulation_utils.add_type_1_demod('dbpsk', dbpsk_demod)\nmodulation_utils.add_type_1_constellation('dbpsk', dbpsk_constellation)\n"]],"start1":0,"start2":0,"length1":0,"length2":6463}]],"length":6463}

<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="classgr__pfb__channelizer__ccf" kind="class" prot="public">
    <compoundname>gr_pfb_channelizer_ccf</compoundname>
    <includes refid="gr__pfb__channelizer__ccf_8h" local="no">gr_pfb_channelizer_ccf.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgr__pfb__channelizer__ccf_1a76942213f7d3d8fcaa4ff25c2826f150" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gr_pfb_channelizer_ccf::d_updated</definition>
        <argsstring></argsstring>
        <name>d_updated</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="140" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgr__pfb__channelizer__ccf_1a546f00e03b55cb15c506a051a4e410b3" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int gr_pfb_channelizer_ccf::d_numchans</definition>
        <argsstring></argsstring>
        <name>d_numchans</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="141" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgr__pfb__channelizer__ccf_1a37531af8569e0a3c4729dc8827f3de41" prot="private" static="no" mutable="no">
        <type>float</type>
        <definition>float gr_pfb_channelizer_ccf::d_oversample_rate</definition>
        <argsstring></argsstring>
        <name>d_oversample_rate</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="142" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgr__pfb__channelizer__ccf_1a4959863cf5468c19257291038d32c158" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classgr__fir__ccf" kindref="compound">gr_fir_ccf</ref> * &gt;</type>
        <definition>std::vector&lt;gr_fir_ccf*&gt; gr_pfb_channelizer_ccf::d_filters</definition>
        <argsstring></argsstring>
        <name>d_filters</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="143" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgr__pfb__channelizer__ccf_1a679c7984d4b2b81fa5aceca697bf6633" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt; std::vector&lt;float&gt; &gt; gr_pfb_channelizer_ccf::d_taps</definition>
        <argsstring></argsstring>
        <name>d_taps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="144" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" bodystart="144" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgr__pfb__channelizer__ccf_1a04496ee7dabeaa40ab557c1799c1a9a1" prot="private" static="no" mutable="no">
        <type>unsigned int</type>
        <definition>unsigned int gr_pfb_channelizer_ccf::d_taps_per_filter</definition>
        <argsstring></argsstring>
        <name>d_taps_per_filter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="145" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgr__pfb__channelizer__ccf_1aca3d8b09ada120e12b421dbe06d1569e" prot="private" static="no" mutable="no">
        <type>gri_fft_complex *</type>
        <definition>gri_fft_complex* gr_pfb_channelizer_ccf::d_fft</definition>
        <argsstring></argsstring>
        <name>d_fft</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="146" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" bodystart="146" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgr__pfb__channelizer__ccf_1a3c2138caa80a146608e46eef119d4450" prot="private" static="no" mutable="no">
        <type>int *</type>
        <definition>int* gr_pfb_channelizer_ccf::d_idxlut</definition>
        <argsstring></argsstring>
        <name>d_idxlut</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="147" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgr__pfb__channelizer__ccf_1ab65e6fe4e03462020dc6a856231a7f4b" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int gr_pfb_channelizer_ccf::d_rate_ratio</definition>
        <argsstring></argsstring>
        <name>d_rate_ratio</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="148" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgr__pfb__channelizer__ccf_1ae4433a5fa8652679710bbc5c62f51ce3" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int gr_pfb_channelizer_ccf::d_output_multiple</definition>
        <argsstring></argsstring>
        <name>d_output_multiple</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="149" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgr__pfb__channelizer__ccf_1a2d32c2d8ced7c5c3c5033f0ceafb09d1" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; gr_pfb_channelizer_ccf::d_channel_map</definition>
        <argsstring></argsstring>
        <name>d_channel_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="150" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgr__pfb__channelizer__ccf_1a64dca2bdbff9a28b40546cd284780754" prot="private" static="no" mutable="no">
        <type>gruel::mutex</type>
        <definition>gruel::mutex gr_pfb_channelizer_ccf::d_mutex</definition>
        <argsstring></argsstring>
        <name>d_mutex</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="151" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classgr__pfb__channelizer__ccf_1acd00d74862c4c21c6d5e1baca9967f70" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend GR_CORE_API <ref refid="gr__pfb__channelizer__ccf_8h_1aa1d7a9b030137ea256ebf0676579693e" kindref="member">gr_pfb_channelizer_ccf_sptr</ref></type>
        <definition>GR_CORE_API gr_pfb_channelizer_ccf_sptr gr_make_pfb_channelizer_ccf</definition>
        <argsstring>(unsigned int numchans, const std::vector&lt; float &gt; &amp;taps, float oversample_rate)</argsstring>
        <name>gr_make_pfb_channelizer_ccf</name>
        <param>
          <type>unsigned int</type>
          <declname>numchans</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>taps</declname>
        </param>
        <param>
          <type>float</type>
          <declname>oversample_rate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build the polyphase filterbank decimator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numchans</parametername>
</parameternamelist>
<parameterdescription>
<para>(unsigned integer) Specifies the number of channels <emphasis>M</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>taps</parametername>
</parameternamelist>
<parameterdescription>
<para>(vector/list of floats) The prototype filter to populate the filterbank. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oversample_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>(float) The over sampling rate is the ratio of the the actual output sampling rate to the normal output sampling rate. It must be rationally related to the number of channels as N/i for i in [1,N], which gives an outputsample rate of [fs/N, fs] where fs is the input sample rate and N is the number of channels.</para></parameterdescription>
</parameteritem>
</parameterlist>
For example, for 6 channels with fs = 6000 Hz, the normal rate is 6000/6 = 1000 Hz. Allowable oversampling rates are 6/6, 6/5, 6/4, 6/3, 6/2, and 6/1 where the output sample rate of a 6/1 oversample ratio is 6000 Hz, or 6 times the normal 1000 Hz. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="138"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgr__pfb__channelizer__ccf_1a2295635dc641da6abfa6530cf39722b7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gr_pfb_channelizer_ccf::gr_pfb_channelizer_ccf</definition>
        <argsstring>(unsigned int numchans, const std::vector&lt; float &gt; &amp;taps, float oversample_rate)</argsstring>
        <name>gr_pfb_channelizer_ccf</name>
        <param>
          <type>unsigned int</type>
          <declname>numchans</declname>
        </param>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>taps</declname>
        </param>
        <param>
          <type>float</type>
          <declname>oversample_rate</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Build the polyphase filterbank decimator. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>numchans</parametername>
</parameternamelist>
<parameterdescription>
<para>(unsigned integer) Specifies the number of channels <emphasis>M</emphasis> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>taps</parametername>
</parameternamelist>
<parameterdescription>
<para>(vector/list of floats) The prototype filter to populate the filterbank. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>oversample_rate</parametername>
</parameternamelist>
<parameterdescription>
<para>(float) The output over sampling rate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="161"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgr__pfb__channelizer__ccf_1a25b8a4dfdc76343c59ce6ea0e992cd98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gr_pfb_channelizer_ccf::~gr_pfb_channelizer_ccf</definition>
        <argsstring>()</argsstring>
        <name>~gr_pfb_channelizer_ccf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="164"/>
      </memberdef>
      <memberdef kind="function" id="classgr__pfb__channelizer__ccf_1ac04a9e2ffc2815d12dc528174c7d9b5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gr_pfb_channelizer_ccf::set_taps</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;taps)</argsstring>
        <name>set_taps</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>taps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Resets the filterbank&apos;s filter taps with the new prototype filter <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>taps</parametername>
</parameternamelist>
<parameterdescription>
<para>(vector/list of floats) The prototype filter to populate the filterbank. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="170"/>
      </memberdef>
      <memberdef kind="function" id="classgr__pfb__channelizer__ccf_1a1a399210c8b4fcb23b4a6226e2c790f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gr_pfb_channelizer_ccf::print_taps</definition>
        <argsstring>()</argsstring>
        <name>print_taps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Print all of the filterbank taps to screen. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="175"/>
      </memberdef>
      <memberdef kind="function" id="classgr__pfb__channelizer__ccf_1a147683e1e0e5fd26dd11f9b945cd647b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::vector&lt; float &gt; &gt;</type>
        <definition>std::vector&lt;std::vector&lt;float&gt; &gt; gr_pfb_channelizer_ccf::taps</definition>
        <argsstring>() const </argsstring>
        <name>taps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return a vector&lt;vector&lt;&gt;&gt; of the filterbank taps </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="180"/>
      </memberdef>
      <memberdef kind="function" id="classgr__pfb__channelizer__ccf_1ae8ec7b7f5d2cd705fb5c2ff1e665bd65" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gr_pfb_channelizer_ccf::set_channel_map</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;map)</argsstring>
        <name>set_channel_map</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>map</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the channel map. Channels are numbers as:</para><para>N/2+1 | ... | N-1 | 0 | 1 | 2 | ... | N/2 &lt;------------------- 0 --------------------&gt; freq</para><para>So output stream 0 comes from channel 0, etc. Setting a new channel map allows the user to specify which channel in frequency he/she wants to got to which output stream.</para><para>The map should have the same number of elements as the number of output connections from the block. The minimum value of the map is 0 (for the 0th channel) and the maximum number is N-1 where N is the number of channels.</para><para>We specify M as the number of output connections made where M &lt;= N, so only M out of N channels are driven to an output stream. The number of items in the channel map should be at least M long. If there are more channels specified, any value in the map over M-1 will be ignored. If the size of the map is less than M the behavior is unknown (we don&apos;t wish to check every entry into the work function).</para><para>This means that if the channelizer is splitting the signal up into N channels but only M channels are specified in the map (where M &lt;= N), then M output streams must be connected and the map and the channel numbers used must be less than N-1. Output channel number can be reused, too. By default, the map is [0...M-1] with M = N. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="213"/>
      </memberdef>
      <memberdef kind="function" id="classgr__pfb__channelizer__ccf_1aed66580726739c2d5d10c261e52ca814" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; gr_pfb_channelizer_ccf::channel_map</definition>
        <argsstring>() const </argsstring>
        <name>channel_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets the current channel map. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="218"/>
      </memberdef>
      <memberdef kind="function" id="classgr__pfb__channelizer__ccf_1a0e6a3d7ca55379a57877462595e2eab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gr_pfb_channelizer_ccf::general_work</definition>
        <argsstring>(int noutput_items, gr_vector_int &amp;ninput_items, gr_vector_const_void_star &amp;input_items, gr_vector_void_star &amp;output_items)</argsstring>
        <name>general_work</name>
        <param>
          <type>int</type>
          <declname>noutput_items</declname>
        </param>
        <param>
          <type>gr_vector_int &amp;</type>
          <declname>ninput_items</declname>
        </param>
        <param>
          <type>gr_vector_const_void_star &amp;</type>
          <declname>input_items</declname>
        </param>
        <param>
          <type>gr_vector_void_star &amp;</type>
          <declname>output_items</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="223"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Polyphase filterbank channelizer with gr_complex input, gr_complex output and float taps. </para>    </briefdescription>
    <detaileddescription>
<para>This block takes in complex inputs and channelizes it to <emphasis>M</emphasis> channels of equal bandwidth. Each of the resulting channels is decimated to the new rate that is the input sampling rate <emphasis>fs</emphasis> divided by the number of channels, <emphasis>M</emphasis>.</para><para>The PFB channelizer code takes the taps generated above and builds a set of filters. The set contains <emphasis>M</emphasis> number of filters and each filter contains ceil(taps.size()/decim) number of taps. Each tap from the filter prototype is sequentially inserted into the next filter. When all of the input taps are used, the remaining filters in the filterbank are filled out with 0&apos;s to make sure each filter has the same number of taps.</para><para>Each filter operates using the gr_fir filter classs of GNU Radio, which takes the input stream at <emphasis>i</emphasis> and performs the inner product calculation to <emphasis>i+(n-1)</emphasis> where <emphasis>n</emphasis> is the number of filter taps. To efficiently handle this in the GNU Radio structure, each filter input must come from its own input stream. So the channelizer must be provided with <emphasis>M</emphasis> streams where the input stream has been deinterleaved. This is most easily done using the gr_stream_to_streams block.</para><para>The output is then produced as a vector, where index <emphasis>i</emphasis> in the vector is the next sample from the <emphasis>i</emphasis>th channel. This is most easily handled by sending the output to a gr_vector_to_streams block to handle the conversion and passing <emphasis>M</emphasis> streams out.</para><para>The input and output formatting is done using a hier_block2 called pfb_channelizer_ccf. This can take in a single stream and outputs <emphasis>M</emphasis> streams based on the behavior described above.</para><para>The filter&apos;s taps should be based on the input sampling rate.</para><para>For example, using the GNU Radio&apos;s firdes utility to building filters, we build a low-pass filter with a sampling rate of <emphasis>fs</emphasis>, a 3-dB bandwidth of <emphasis>BW</emphasis> and a transition bandwidth of <emphasis>TB</emphasis>. We can also specify the out-of-band attenuation to use, <emphasis>ATT</emphasis>, and the filter window function (a Blackman-harris window in this case). The first input is the gain of the filter, which we specify here as unity.</para><para><bold><emphasis>self._taps = gr.firdes.low_pass_2(1, fs, BW, TB, attenuation_dB=ATT, window=gr.firdes.WIN_BLACKMAN_hARRIS)</emphasis></bold></para><para>The filter output can also be overs ampled. The over sampling rate is the ratio of the the actual output sampling rate to the normal output sampling rate. It must be rationally related to the number of channels as N/i for i in [1,N], which gives an outputsample rate of [fs/N, fs] where fs is the input sample rate and N is the number of channels.</para><para>For example, for 6 channels with fs = 6000 Hz, the normal rate is 6000/6 = 1000 Hz. Allowable oversampling rates are 6/6, 6/5, 6/4, 6/3, 6/2, and 6/1 where the output sample rate of a 6/1 oversample ratio is 6000 Hz, or 6 times the normal 1000 Hz. A rate of 6/5 = 1.2, so the output rate would be 1200 Hz.</para><para>The theory behind this block can be found in Chapter 6 of the following book.</para><para><bold><emphasis>f. harris, &quot;Multirate Signal Processing for Communication
       Systems,&quot; Upper Saddle River, NJ: Prentice Hall, Inc. 2004.</emphasis></bold> </para>    </detaileddescription>
    <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" line="117" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/filter/gr_pfb_channelizer_ccf.h" bodystart="116" bodyend="224"/>
    <listofallmembers>
      <member refid="classgr__pfb__channelizer__ccf_1aed66580726739c2d5d10c261e52ca814" prot="public" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>channel_map</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1a2d32c2d8ced7c5c3c5033f0ceafb09d1" prot="private" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>d_channel_map</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1aca3d8b09ada120e12b421dbe06d1569e" prot="private" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>d_fft</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1a4959863cf5468c19257291038d32c158" prot="private" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>d_filters</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1a3c2138caa80a146608e46eef119d4450" prot="private" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>d_idxlut</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1a64dca2bdbff9a28b40546cd284780754" prot="private" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>d_mutex</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1a546f00e03b55cb15c506a051a4e410b3" prot="private" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>d_numchans</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1ae4433a5fa8652679710bbc5c62f51ce3" prot="private" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>d_output_multiple</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1a37531af8569e0a3c4729dc8827f3de41" prot="private" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>d_oversample_rate</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1ab65e6fe4e03462020dc6a856231a7f4b" prot="private" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>d_rate_ratio</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1a679c7984d4b2b81fa5aceca697bf6633" prot="private" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>d_taps</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1a04496ee7dabeaa40ab557c1799c1a9a1" prot="private" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>d_taps_per_filter</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1a76942213f7d3d8fcaa4ff25c2826f150" prot="private" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>d_updated</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1a0e6a3d7ca55379a57877462595e2eab4" prot="public" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>general_work</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1acd00d74862c4c21c6d5e1baca9967f70" prot="private" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>gr_make_pfb_channelizer_ccf</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1a2295635dc641da6abfa6530cf39722b7" prot="private" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>gr_pfb_channelizer_ccf</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1a1a399210c8b4fcb23b4a6226e2c790f6" prot="public" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>print_taps</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1ae8ec7b7f5d2cd705fb5c2ff1e665bd65" prot="public" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>set_channel_map</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1ac04a9e2ffc2815d12dc528174c7d9b5f" prot="public" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>set_taps</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1a147683e1e0e5fd26dd11f9b945cd647b" prot="public" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>taps</name></member>
      <member refid="classgr__pfb__channelizer__ccf_1a25b8a4dfdc76343c59ce6ea0e992cd98" prot="public" virt="non-virtual"><scope>gr_pfb_channelizer_ccf</scope><name>~gr_pfb_channelizer_ccf</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

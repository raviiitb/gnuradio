<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="classgr__fir__ccf" kind="class" prot="public">
    <compoundname>gr_fir_ccf</compoundname>
    <derivedcompoundref refid="classgr__fir__ccf__generic" prot="public" virt="non-virtual">gr_fir_ccf_generic</derivedcompoundref>
    <includes refid="gr__fir__ccf_8h" local="no">gr_fir_ccf.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classgr__fir__ccf_1a9af107e829a86398e5f607702840806a" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; float &gt;</type>
        <definition>std::vector&lt;float&gt; gr_fir_ccf::d_taps</definition>
        <argsstring></argsstring>
        <name>d_taps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" line="51" bodyfile="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgr__fir__ccf_1aa48a9accdb4deced4b5b04061a8961df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gr_fir_ccf::gr_fir_ccf</definition>
        <argsstring>()</argsstring>
        <name>gr_fir_ccf</name>
        <briefdescription>
<para>construct new FIR with given taps. </para>        </briefdescription>
        <detaileddescription>
<para>Note that taps must be in forward order, e.g., coefficient 0 is stored in new_taps[0], coefficient 1 is stored in new_taps[1], etc. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" line="64" bodyfile="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classgr__fir__ccf_1a9d5ba21009ff25164b8fdf08d0c8c7e3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gr_fir_ccf::gr_fir_ccf</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;taps)</argsstring>
        <name>gr_fir_ccf</name>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>taps</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" line="65" bodyfile="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classgr__fir__ccf_1a1823367b810356281a5e87efa1b57d8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual gr_fir_ccf::~gr_fir_ccf</definition>
        <argsstring>()</argsstring>
        <name>~gr_fir_ccf</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" line="67"/>
      </memberdef>
      <memberdef kind="function" id="classgr__fir__ccf_1a71c4c6b0140a1d5361ba775cf71bb797" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>gr_complex</type>
        <definition>virtual gr_complex gr_fir_ccf::filter</definition>
        <argsstring>(const gr_complex input[])=0</argsstring>
        <name>filter</name>
        <reimplementedby refid="classgr__fir__ccf__armv7__a_1a4b307c8b6bb4189b3c7fc084bb3305b3">filter</reimplementedby>
        <reimplementedby refid="classgr__fir__ccf__generic_1aa3965e06fadc82c0ffde8949842b6088">filter</reimplementedby>
        <reimplementedby refid="classgr__fir__ccf__simd_1a8acdb63d025f11d8f028565c68f03bc0">filter</reimplementedby>
        <param>
          <type>const gr_complex</type>
          <declname>input</declname>
          <array>[]</array>
        </param>
        <briefdescription>
<para>compute a single output value. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>input</computeroutput> must have <ref refid="classgr__fir__ccf_1a03fb8ba5795cd467c6bd6314ac4a4d78" kindref="member">ntaps()</ref> valid entries. input[0] .. input[<ref refid="classgr__fir__ccf_1a03fb8ba5795cd467c6bd6314ac4a4d78" kindref="member">ntaps()</ref> - 1] are referenced to compute the output value.</para><para><simplesect kind="return"><para>the filtered input value. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" line="79"/>
      </memberdef>
      <memberdef kind="function" id="classgr__fir__ccf_1ad5cf87431f23dd0a3aed215b10ea70fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr_fir_ccf::filterN</definition>
        <argsstring>(gr_complex output[], const gr_complex input[], unsigned long n)=0</argsstring>
        <name>filterN</name>
        <reimplementedby refid="classgr__fir__ccf__generic_1ad06a6a9c87cfd7c20f0b0746f46fa28c">filterN</reimplementedby>
        <param>
          <type>gr_complex</type>
          <declname>output</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const gr_complex</type>
          <declname>input</declname>
          <array>[]</array>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
<para>compute an array of N output values. </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>input</computeroutput> must have (n - 1 + <ref refid="classgr__fir__ccf_1a03fb8ba5795cd467c6bd6314ac4a4d78" kindref="member">ntaps()</ref>) valid entries. input[0] .. input[n - 1 + <ref refid="classgr__fir__ccf_1a03fb8ba5795cd467c6bd6314ac4a4d78" kindref="member">ntaps()</ref> - 1] are referenced to compute the output values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" line="88"/>
      </memberdef>
      <memberdef kind="function" id="classgr__fir__ccf_1a493142da6b8c3a91c413aae1d0e9975c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr_fir_ccf::filterNdec</definition>
        <argsstring>(gr_complex output[], const gr_complex input[], unsigned long n, unsigned decimate)=0</argsstring>
        <name>filterNdec</name>
        <reimplementedby refid="classgr__fir__ccf__generic_1a05e2e78319edd5f5a8902b9b09c45756">filterNdec</reimplementedby>
        <param>
          <type>gr_complex</type>
          <declname>output</declname>
          <array>[]</array>
        </param>
        <param>
          <type>const gr_complex</type>
          <declname>input</declname>
          <array>[]</array>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>n</declname>
        </param>
        <param>
          <type>unsigned</type>
          <declname>decimate</declname>
        </param>
        <briefdescription>
<para>compute an array of N output values, decimating the input </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>input</computeroutput> must have (decimate * (n - 1) + <ref refid="classgr__fir__ccf_1a03fb8ba5795cd467c6bd6314ac4a4d78" kindref="member">ntaps()</ref>) valid entries. input[0] .. input[decimate * (n - 1) + <ref refid="classgr__fir__ccf_1a03fb8ba5795cd467c6bd6314ac4a4d78" kindref="member">ntaps()</ref> - 1] are referenced to compute the output values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" line="98"/>
      </memberdef>
      <memberdef kind="function" id="classgr__fir__ccf_1afaa800d2c0901730c37101bdfff9386d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void gr_fir_ccf::set_taps</definition>
        <argsstring>(const std::vector&lt; float &gt; &amp;taps)</argsstring>
        <name>set_taps</name>
        <reimplementedby refid="classgr__fir__ccf__armv7__a_1a448c85dfefd3c8d75aa715c2a2204010">set_taps</reimplementedby>
        <reimplementedby refid="classgr__fir__ccf__simd_1a970d13e317fa6471e65da3bcd94a2e24">set_taps</reimplementedby>
        <param>
          <type>const std::vector&lt; float &gt; &amp;</type>
          <declname>taps</declname>
        </param>
        <briefdescription>
<para>install <computeroutput>new_taps</computeroutput> as the current taps. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" line="104" bodyfile="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classgr__fir__ccf_1a03fb8ba5795cd467c6bd6314ac4a4d78" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned gr_fir_ccf::ntaps</definition>
        <argsstring>() const </argsstring>
        <name>ntaps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of taps in filter. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" line="113" bodyfile="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classgr__fir__ccf_1ab1ed3d65aaa985e7032fd5e9243537d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const std::vector&lt; float &gt;</type>
        <definition>virtual const std::vector&lt;float&gt; gr_fir_ccf::get_taps</definition>
        <argsstring>() const </argsstring>
        <name>get_taps</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>current taps </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" line="119" bodyfile="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" bodystart="118" bodyend="121"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract class for FIR with gr_complex input, gr_complex output and float taps</para><para>This is the abstract class for a Finite Impulse Response filter. </para>    </briefdescription>
    <detaileddescription>
<para>The trailing suffix has the form _IOT where I codes the input type, O codes the output type, and T codes the tap type. I,O,T are elements of the set &apos;s&apos; (short), &apos;f&apos; (float), &apos;c&apos; (gr_complex), &apos;i&apos; (int) </para>    </detaileddescription>
    <inheritancegraph>
      <node id="391">
        <label>gr_fir_ccf_simd</label>
        <link refid="classgr__fir__ccf__simd"/>
        <childnode refid="389" relation="public-inheritance">
        </childnode>
      </node>
      <node id="393">
        <label>gr_fir_ccf_sse</label>
        <link refid="classgr__fir__ccf__sse"/>
        <childnode refid="391" relation="public-inheritance">
        </childnode>
      </node>
      <node id="388">
        <label>gr_fir_ccf</label>
        <link refid="classgr__fir__ccf"/>
      </node>
      <node id="389">
        <label>gr_fir_ccf_generic</label>
        <link refid="classgr__fir__ccf__generic"/>
        <childnode refid="388" relation="public-inheritance">
        </childnode>
      </node>
      <node id="390">
        <label>gr_fir_ccf_armv7_a</label>
        <link refid="classgr__fir__ccf__armv7__a"/>
        <childnode refid="389" relation="public-inheritance">
        </childnode>
      </node>
      <node id="392">
        <label>gr_fir_ccf_3dnow</label>
        <link refid="classgr__fir__ccf__3dnow"/>
        <childnode refid="391" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="395">
        <label>std::vector&lt; float &gt;</label>
      </node>
      <node id="394">
        <label>gr_fir_ccf</label>
        <link refid="classgr__fir__ccf"/>
        <childnode refid="395" relation="usage">
          <edgelabel>d_taps</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" line="48" bodyfile="/home/alexzh/gr_alex/gnuradio/build/gnuradio-core/src/lib/filter/gr_fir_ccf.h" bodystart="48" bodyend="122"/>
    <listofallmembers>
      <member refid="classgr__fir__ccf_1a9af107e829a86398e5f607702840806a" prot="protected" virt="non-virtual"><scope>gr_fir_ccf</scope><name>d_taps</name></member>
      <member refid="classgr__fir__ccf_1a71c4c6b0140a1d5361ba775cf71bb797" prot="public" virt="pure-virtual"><scope>gr_fir_ccf</scope><name>filter</name></member>
      <member refid="classgr__fir__ccf_1ad5cf87431f23dd0a3aed215b10ea70fa" prot="public" virt="pure-virtual"><scope>gr_fir_ccf</scope><name>filterN</name></member>
      <member refid="classgr__fir__ccf_1a493142da6b8c3a91c413aae1d0e9975c" prot="public" virt="pure-virtual"><scope>gr_fir_ccf</scope><name>filterNdec</name></member>
      <member refid="classgr__fir__ccf_1ab1ed3d65aaa985e7032fd5e9243537d1" prot="public" virt="virtual"><scope>gr_fir_ccf</scope><name>get_taps</name></member>
      <member refid="classgr__fir__ccf_1aa48a9accdb4deced4b5b04061a8961df" prot="public" virt="non-virtual"><scope>gr_fir_ccf</scope><name>gr_fir_ccf</name></member>
      <member refid="classgr__fir__ccf_1a9d5ba21009ff25164b8fdf08d0c8c7e3" prot="public" virt="non-virtual"><scope>gr_fir_ccf</scope><name>gr_fir_ccf</name></member>
      <member refid="classgr__fir__ccf_1a03fb8ba5795cd467c6bd6314ac4a4d78" prot="public" virt="non-virtual"><scope>gr_fir_ccf</scope><name>ntaps</name></member>
      <member refid="classgr__fir__ccf_1afaa800d2c0901730c37101bdfff9386d" prot="public" virt="virtual"><scope>gr_fir_ccf</scope><name>set_taps</name></member>
      <member refid="classgr__fir__ccf_1a1823367b810356281a5e87efa1b57d8f" prot="public" virt="virtual"><scope>gr_fir_ccf</scope><name>~gr_fir_ccf</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

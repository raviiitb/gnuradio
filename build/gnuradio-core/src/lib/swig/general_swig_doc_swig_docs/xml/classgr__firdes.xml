<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="classgr__firdes" kind="class" prot="public">
    <compoundname>gr_firdes</compoundname>
    <includes refid="gr__firdes_8h" local="no">gr_firdes.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" prot="public" static="no">
        <name>win_type</name>
        <enumvalue id="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca9ecf16aac5495bd054e124d073e23bfa" prot="public">
          <name>WIN_HAMMING</name>
          <initializer> 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca0283f236f2f1614bcb1534375d0a4d5c" prot="public">
          <name>WIN_HANN</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca1c72b129266703afdcc486aebd763fe8" prot="public">
          <name>WIN_BLACKMAN</name>
          <initializer> 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca93358f88cb8ea7cc99ba5b1a45878290" prot="public">
          <name>WIN_RECTANGULAR</name>
          <initializer> 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456cacf24e696ceb7054a0f48ded24940106e" prot="public">
          <name>WIN_KAISER</name>
          <initializer> 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca6bc60911da96133b31392c35cb4f797b" prot="public">
          <name>WIN_BLACKMAN_hARRIS</name>
          <initializer> 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca7b0f17c9d352d2c790655316a527c5d2" prot="public">
          <name>WIN_BLACKMAN_HARRIS</name>
          <initializer> 5</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="39" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" bodystart="39" bodyend="47"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgr__firdes_1a0cf14cf1cab23b635081d0ff8bf6140a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>static std::vector&lt;float&gt; gr_firdes::low_pass</definition>
        <argsstring>(double gain, double sampling_freq, double cutoff_freq, double transition_width, win_type window=WIN_HAMMING, double beta=6.76)</argsstring>
        <name>low_pass</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <param>
          <type><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" kindref="member">win_type</ref></type>
          <declname>window</declname>
          <defval><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca9ecf16aac5495bd054e124d073e23bfa" kindref="member">WIN_HAMMING</ref></defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>6.76</defval>
        </param>
        <briefdescription>
<para>use &quot;window method&quot; to design a low-pass FIR filter </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>gain:</computeroutput> overall gain of filter (typically 1.0) <computeroutput>sampling_freq:</computeroutput> sampling freq (Hz) <computeroutput>cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>transition_width:</computeroutput> width of transition band (Hz). The normalized width of the transition band is what sets the number of taps required. Narrow --&gt; more taps <computeroutput>window_type:</computeroutput> What kind of window to use. Determines maximum attenuation and passband ripple. <computeroutput>beta:</computeroutput> parameter for Kaiser window </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="72"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1a7347642df3e2f5090db468750da56d56" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>static std::vector&lt;float&gt; gr_firdes::low_pass_2</definition>
        <argsstring>(double gain, double sampling_freq, double cutoff_freq, double transition_width, double attenuation_dB, win_type window=WIN_HAMMING, double beta=6.76)</argsstring>
        <name>low_pass_2</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>attenuation_dB</declname>
        </param>
        <param>
          <type><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" kindref="member">win_type</ref></type>
          <declname>window</declname>
          <defval><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca9ecf16aac5495bd054e124d073e23bfa" kindref="member">WIN_HAMMING</ref></defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>6.76</defval>
        </param>
        <briefdescription>
<para>use &quot;window method&quot; to design a low-pass FIR filter </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>gain:</computeroutput> overall gain of filter (typically 1.0) <computeroutput>sampling_freq:</computeroutput> sampling freq (Hz) <computeroutput>cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>transition_width:</computeroutput> width of transition band (Hz). <computeroutput>attenuation_dB</computeroutput> required stopband attenuation The normalized width of the transition band and the required stop band attenuation is what sets the number of taps required. Narrow --&gt; more taps More attenuatin --&gt; more taps <computeroutput>window_type:</computeroutput> What kind of window to use. Determines maximum attenuation and passband ripple. <computeroutput>beta:</computeroutput> parameter for Kaiser window </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="99"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1acf767ad8eccf3c5c283d578599a63691" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>static std::vector&lt;float&gt; gr_firdes::high_pass</definition>
        <argsstring>(double gain, double sampling_freq, double cutoff_freq, double transition_width, win_type window=WIN_HAMMING, double beta=6.76)</argsstring>
        <name>high_pass</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <param>
          <type><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" kindref="member">win_type</ref></type>
          <declname>window</declname>
          <defval><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca9ecf16aac5495bd054e124d073e23bfa" kindref="member">WIN_HAMMING</ref></defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>6.76</defval>
        </param>
        <briefdescription>
<para>use &quot;window method&quot; to design a high-pass FIR filter </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>gain:</computeroutput> overall gain of filter (typically 1.0) <computeroutput>sampling_freq:</computeroutput> sampling freq (Hz) <computeroutput>cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>transition_width:</computeroutput> width of transition band (Hz). The normalized width of the transition band is what sets the number of taps required. Narrow --&gt; more taps <computeroutput>window_type:</computeroutput> What kind of window to use. Determines maximum attenuation and passband ripple. <computeroutput>beta:</computeroutput> parameter for Kaiser window </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="122"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1a06bb3ea1c1bfeefe8ed860d23285c040" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>static std::vector&lt;float&gt; gr_firdes::high_pass_2</definition>
        <argsstring>(double gain, double sampling_freq, double cutoff_freq, double transition_width, double attenuation_dB, win_type window=WIN_HAMMING, double beta=6.76)</argsstring>
        <name>high_pass_2</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>attenuation_dB</declname>
        </param>
        <param>
          <type><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" kindref="member">win_type</ref></type>
          <declname>window</declname>
          <defval><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca9ecf16aac5495bd054e124d073e23bfa" kindref="member">WIN_HAMMING</ref></defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>6.76</defval>
        </param>
        <briefdescription>
<para>use &quot;window method&quot; to design a high-pass FIR filter </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>gain:</computeroutput> overall gain of filter (typically 1.0) <computeroutput>sampling_freq:</computeroutput> sampling freq (Hz) <computeroutput>cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>transition_width:</computeroutput> width of transition band (Hz). <computeroutput>attenuation_dB</computeroutput> out of band attenuation The normalized width of the transition band and the required stop band attenuation is what sets the number of taps required. Narrow --&gt; more taps More attenuation --&gt; more taps <computeroutput>window_type:</computeroutput> What kind of window to use. Determines maximum attenuation and passband ripple. <computeroutput>beta:</computeroutput> parameter for Kaiser window </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="149"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1a074fc918cbcd8408898f2660a2d6bbf6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>static std::vector&lt;float&gt; gr_firdes::band_pass</definition>
        <argsstring>(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, win_type window=WIN_HAMMING, double beta=6.76)</argsstring>
        <name>band_pass</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>low_cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>high_cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <param>
          <type><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" kindref="member">win_type</ref></type>
          <declname>window</declname>
          <defval><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca9ecf16aac5495bd054e124d073e23bfa" kindref="member">WIN_HAMMING</ref></defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>6.76</defval>
        </param>
        <briefdescription>
<para>use &quot;window method&quot; to design a band-pass FIR filter </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>gain:</computeroutput> overall gain of filter (typically 1.0) <computeroutput>sampling_freq:</computeroutput> sampling freq (Hz) <computeroutput>low_cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>high_cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>transition_width:</computeroutput> width of transition band (Hz). The normalized width of the transition band is what sets the number of taps required. Narrow --&gt; more taps <computeroutput>window_type:</computeroutput> What kind of window to use. Determines maximum attenuation and passband ripple. <computeroutput>beta:</computeroutput> parameter for Kaiser window </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="173"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1a1101286ed88565ed9b273670701cd07b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>static std::vector&lt;float&gt; gr_firdes::band_pass_2</definition>
        <argsstring>(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, double attenuation_dB, win_type window=WIN_HAMMING, double beta=6.76)</argsstring>
        <name>band_pass_2</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>low_cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>high_cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>attenuation_dB</declname>
        </param>
        <param>
          <type><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" kindref="member">win_type</ref></type>
          <declname>window</declname>
          <defval><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca9ecf16aac5495bd054e124d073e23bfa" kindref="member">WIN_HAMMING</ref></defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>6.76</defval>
        </param>
        <briefdescription>
<para>use &quot;window method&quot; to design a band-pass FIR filter </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>gain:</computeroutput> overall gain of filter (typically 1.0) <computeroutput>sampling_freq:</computeroutput> sampling freq (Hz) <computeroutput>low_cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>high_cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>transition_width:</computeroutput> width of transition band (Hz). <computeroutput>attenuation_dB</computeroutput> out of band attenuation The normalized width of the transition band and the required stop band attenuation is what sets the number of taps required. Narrow --&gt; more taps More attenuation --&gt; more taps <computeroutput>window_type:</computeroutput> What kind of window to use. Determines maximum attenuation and passband ripple. <computeroutput>beta:</computeroutput> parameter for Kaiser window </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="202"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1a2d35be73189d6763a00b5585159ee500" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; gr_complex &gt;</type>
        <definition>static std::vector&lt;gr_complex&gt; gr_firdes::complex_band_pass</definition>
        <argsstring>(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, win_type window=WIN_HAMMING, double beta=6.76)</argsstring>
        <name>complex_band_pass</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>low_cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>high_cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <param>
          <type><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" kindref="member">win_type</ref></type>
          <declname>window</declname>
          <defval><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca9ecf16aac5495bd054e124d073e23bfa" kindref="member">WIN_HAMMING</ref></defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>6.76</defval>
        </param>
        <briefdescription>
<para>use &quot;window method&quot; to design a complex band-pass FIR filter </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>gain:</computeroutput> overall gain of filter (typically 1.0) <computeroutput>sampling_freq:</computeroutput> sampling freq (Hz) <computeroutput>low_cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>high_cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>transition_width:</computeroutput> width of transition band (Hz). The normalized width of the transition band is what sets the number of taps required. Narrow --&gt; more taps <computeroutput>window_type:</computeroutput> What kind of window to use. Determines maximum attenuation and passband ripple. <computeroutput>beta:</computeroutput> parameter for Kaiser window </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="227"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1a7771ca6a6e9d430c2828573651eead19" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; gr_complex &gt;</type>
        <definition>static std::vector&lt;gr_complex&gt; gr_firdes::complex_band_pass_2</definition>
        <argsstring>(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, double attenuation_dB, win_type window=WIN_HAMMING, double beta=6.76)</argsstring>
        <name>complex_band_pass_2</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>low_cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>high_cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>attenuation_dB</declname>
        </param>
        <param>
          <type><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" kindref="member">win_type</ref></type>
          <declname>window</declname>
          <defval><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca9ecf16aac5495bd054e124d073e23bfa" kindref="member">WIN_HAMMING</ref></defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>6.76</defval>
        </param>
        <briefdescription>
<para>use &quot;window method&quot; to design a complex band-pass FIR filter </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>gain:</computeroutput> overall gain of filter (typically 1.0) <computeroutput>sampling_freq:</computeroutput> sampling freq (Hz) <computeroutput>low_cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>high_cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>transition_width:</computeroutput> width of transition band (Hz). <computeroutput>attenuation_dB</computeroutput> out of band attenuation The normalized width of the transition band and the required stop band attenuation is what sets the number of taps required. Narrow --&gt; more taps More attenuation --&gt; more taps <computeroutput>window_type:</computeroutput> What kind of window to use. Determines maximum attenuation and passband ripple. <computeroutput>beta:</computeroutput> parameter for Kaiser window </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="256"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1aed7654868c14219e4a9bd75aa5b2c39e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>static std::vector&lt;float&gt; gr_firdes::band_reject</definition>
        <argsstring>(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, win_type window=WIN_HAMMING, double beta=6.76)</argsstring>
        <name>band_reject</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>low_cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>high_cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <param>
          <type><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" kindref="member">win_type</ref></type>
          <declname>window</declname>
          <defval><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca9ecf16aac5495bd054e124d073e23bfa" kindref="member">WIN_HAMMING</ref></defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>6.76</defval>
        </param>
        <briefdescription>
<para>use &quot;window method&quot; to design a band-reject FIR filter </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>gain:</computeroutput> overall gain of filter (typically 1.0) <computeroutput>sampling_freq:</computeroutput> sampling freq (Hz) <computeroutput>low_cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>high_cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>transition_width:</computeroutput> width of transition band (Hz). The normalized width of the transition band is what sets the number of taps required. Narrow --&gt; more taps <computeroutput>window_type:</computeroutput> What kind of window to use. Determines maximum attenuation and passband ripple. <computeroutput>beta:</computeroutput> parameter for Kaiser window </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="281"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1a96177c53698f5d443a294358e8122674" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>static std::vector&lt;float&gt; gr_firdes::band_reject_2</definition>
        <argsstring>(double gain, double sampling_freq, double low_cutoff_freq, double high_cutoff_freq, double transition_width, double attenuation_dB, win_type window=WIN_HAMMING, double beta=6.76)</argsstring>
        <name>band_reject_2</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>low_cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>high_cutoff_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>attenuation_dB</declname>
        </param>
        <param>
          <type><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" kindref="member">win_type</ref></type>
          <declname>window</declname>
          <defval><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca9ecf16aac5495bd054e124d073e23bfa" kindref="member">WIN_HAMMING</ref></defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>6.76</defval>
        </param>
        <briefdescription>
<para>use &quot;window method&quot; to design a band-reject FIR filter </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>gain:</computeroutput> overall gain of filter (typically 1.0) <computeroutput>sampling_freq:</computeroutput> sampling freq (Hz) <computeroutput>low_cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>high_cutoff_freq:</computeroutput> center of transition band (Hz) <computeroutput>transition_width:</computeroutput> width of transition band (Hz). <computeroutput>attenuation_dB</computeroutput> out of band attenuation The normalized width of the transition band and the required stop band attenuation is what sets the number of taps required. Narrow --&gt; more taps More attenuation --&gt; more taps <computeroutput>window_type:</computeroutput> What kind of window to use. Determines maximum attenuation and passband ripple. <computeroutput>beta:</computeroutput> parameter for Kaiser window </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="310"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1ae885fbaeb36e33125affcfa7a908be5a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>static std::vector&lt;float&gt; gr_firdes::hilbert</definition>
        <argsstring>(unsigned int ntaps=19, win_type windowtype=WIN_RECTANGULAR, double beta=6.76)</argsstring>
        <name>hilbert</name>
        <param>
          <type>unsigned int</type>
          <declname>ntaps</declname>
          <defval>19</defval>
        </param>
        <param>
          <type><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" kindref="member">win_type</ref></type>
          <declname>windowtype</declname>
          <defval><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca93358f88cb8ea7cc99ba5b1a45878290" kindref="member">WIN_RECTANGULAR</ref></defval>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
          <defval>6.76</defval>
        </param>
        <briefdescription>
<para>design a Hilbert Transform Filter </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>ntaps:</computeroutput> Number of taps, must be odd <computeroutput>window_type:</computeroutput> What kind of window to use <computeroutput>beta:</computeroutput> Only used for Kaiser </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="321"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1a06ddce94f6ea7477d9a2f4d165f0bb1c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>static std::vector&lt;float&gt; gr_firdes::root_raised_cosine</definition>
        <argsstring>(double gain, double sampling_freq, double symbol_rate, double alpha, int ntaps)</argsstring>
        <name>root_raised_cosine</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>symbol_rate</declname>
        </param>
        <param>
          <type>double</type>
          <declname>alpha</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ntaps</declname>
        </param>
        <briefdescription>
<para>design a Root Cosine FIR Filter (do we need a window?) </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>gain:</computeroutput> overall gain of filter (typically 1.0) <computeroutput>sampling_freq:</computeroutput> sampling freq (Hz) <computeroutput>symbol</computeroutput> rate: symbol rate, must be a factor of sample rate <computeroutput>alpha:</computeroutput> excess bandwidth factor <computeroutput>ntaps:</computeroutput> number of taps </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="337"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1abc309da910b6570a38f800093ebd12b1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>static std::vector&lt;float&gt; gr_firdes::gaussian</definition>
        <argsstring>(double gain, double spb, double bt, int ntaps)</argsstring>
        <name>gaussian</name>
        <param>
          <type>double</type>
          <declname>gain</declname>
        </param>
        <param>
          <type>double</type>
          <declname>spb</declname>
        </param>
        <param>
          <type>double</type>
          <declname>bt</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ntaps</declname>
        </param>
        <briefdescription>
<para>design a Gaussian filter </para>        </briefdescription>
        <detaileddescription>
<para><computeroutput>gain:</computeroutput> overall gain of filter (typically 1.0) <computeroutput>symbols</computeroutput> per bit: symbol rate, must be a factor of sample rate <computeroutput>ntaps:</computeroutput> number of taps </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="350"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1a5d1296e7e53019564a8a146fa3a9caaf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; float &gt;</type>
        <definition>static std::vector&lt;float&gt; gr_firdes::window</definition>
        <argsstring>(win_type type, int ntaps, double beta)</argsstring>
        <name>window</name>
        <param>
          <type><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" kindref="member">win_type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ntaps</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="353"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classgr__firdes_1ab00b5e27bc3095b291846dab4c700acb" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>static double gr_firdes::bessi0</definition>
        <argsstring>(double x)</argsstring>
        <name>bessi0</name>
        <param>
          <type>double</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="356"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1aa23412c76940280652180df5b2a38602" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gr_firdes::sanity_check_1f</definition>
        <argsstring>(double sampling_freq, double f1, double transition_width)</argsstring>
        <name>sanity_check_1f</name>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="358"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1a4f0d93543cb519be1a41d9c6bb444660" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gr_firdes::sanity_check_2f</definition>
        <argsstring>(double sampling_freq, double f1, double f2, double transition_width)</argsstring>
        <name>sanity_check_2f</name>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="360"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1a0f871bcc3b99701895a6be04d74b234d" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gr_firdes::sanity_check_2f_c</definition>
        <argsstring>(double sampling_freq, double f1, double f2, double transition_width)</argsstring>
        <name>sanity_check_2f_c</name>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>f1</declname>
        </param>
        <param>
          <type>double</type>
          <declname>f2</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="362"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1acd19163d29fc9912895b5614ded74443" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int gr_firdes::compute_ntaps</definition>
        <argsstring>(double sampling_freq, double transition_width, win_type window_type, double beta)</argsstring>
        <name>compute_ntaps</name>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <param>
          <type><ref refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" kindref="member">win_type</ref></type>
          <declname>window_type</declname>
        </param>
        <param>
          <type>double</type>
          <declname>beta</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="366"/>
      </memberdef>
      <memberdef kind="function" id="classgr__firdes_1ab260a31c95d61402b3b7b7dd98955f0f" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int gr_firdes::compute_ntaps_windes</definition>
        <argsstring>(double sampling_freq, double transition_width, double attenuation_dB)</argsstring>
        <name>compute_ntaps_windes</name>
        <param>
          <type>double</type>
          <declname>sampling_freq</declname>
        </param>
        <param>
          <type>double</type>
          <declname>transition_width</declname>
        </param>
        <param>
          <type>double</type>
          <declname>attenuation_dB</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="370"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Finite Impulse Response (FIR) filter design functions. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" line="36" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/general/gr_firdes.h" bodystart="36" bodyend="371"/>
    <listofallmembers>
      <member refid="classgr__firdes_1a074fc918cbcd8408898f2660a2d6bbf6" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>band_pass</name></member>
      <member refid="classgr__firdes_1a1101286ed88565ed9b273670701cd07b" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>band_pass_2</name></member>
      <member refid="classgr__firdes_1aed7654868c14219e4a9bd75aa5b2c39e" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>band_reject</name></member>
      <member refid="classgr__firdes_1a96177c53698f5d443a294358e8122674" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>band_reject_2</name></member>
      <member refid="classgr__firdes_1ab00b5e27bc3095b291846dab4c700acb" prot="private" virt="non-virtual"><scope>gr_firdes</scope><name>bessi0</name></member>
      <member refid="classgr__firdes_1a2d35be73189d6763a00b5585159ee500" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>complex_band_pass</name></member>
      <member refid="classgr__firdes_1a7771ca6a6e9d430c2828573651eead19" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>complex_band_pass_2</name></member>
      <member refid="classgr__firdes_1acd19163d29fc9912895b5614ded74443" prot="private" virt="non-virtual"><scope>gr_firdes</scope><name>compute_ntaps</name></member>
      <member refid="classgr__firdes_1ab260a31c95d61402b3b7b7dd98955f0f" prot="private" virt="non-virtual"><scope>gr_firdes</scope><name>compute_ntaps_windes</name></member>
      <member refid="classgr__firdes_1abc309da910b6570a38f800093ebd12b1" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>gaussian</name></member>
      <member refid="classgr__firdes_1acf767ad8eccf3c5c283d578599a63691" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>high_pass</name></member>
      <member refid="classgr__firdes_1a06bb3ea1c1bfeefe8ed860d23285c040" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>high_pass_2</name></member>
      <member refid="classgr__firdes_1ae885fbaeb36e33125affcfa7a908be5a" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>hilbert</name></member>
      <member refid="classgr__firdes_1a0cf14cf1cab23b635081d0ff8bf6140a" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>low_pass</name></member>
      <member refid="classgr__firdes_1a7347642df3e2f5090db468750da56d56" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>low_pass_2</name></member>
      <member refid="classgr__firdes_1a06ddce94f6ea7477d9a2f4d165f0bb1c" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>root_raised_cosine</name></member>
      <member refid="classgr__firdes_1aa23412c76940280652180df5b2a38602" prot="private" virt="non-virtual"><scope>gr_firdes</scope><name>sanity_check_1f</name></member>
      <member refid="classgr__firdes_1a4f0d93543cb519be1a41d9c6bb444660" prot="private" virt="non-virtual"><scope>gr_firdes</scope><name>sanity_check_2f</name></member>
      <member refid="classgr__firdes_1a0f871bcc3b99701895a6be04d74b234d" prot="private" virt="non-virtual"><scope>gr_firdes</scope><name>sanity_check_2f_c</name></member>
      <member refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca1c72b129266703afdcc486aebd763fe8" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>WIN_BLACKMAN</name></member>
      <member refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca7b0f17c9d352d2c790655316a527c5d2" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>WIN_BLACKMAN_HARRIS</name></member>
      <member refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca6bc60911da96133b31392c35cb4f797b" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>WIN_BLACKMAN_hARRIS</name></member>
      <member refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca9ecf16aac5495bd054e124d073e23bfa" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>WIN_HAMMING</name></member>
      <member refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca0283f236f2f1614bcb1534375d0a4d5c" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>WIN_HANN</name></member>
      <member refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456cacf24e696ceb7054a0f48ded24940106e" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>WIN_KAISER</name></member>
      <member refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456ca93358f88cb8ea7cc99ba5b1a45878290" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>WIN_RECTANGULAR</name></member>
      <member refid="classgr__firdes_1a49ec223781ec35f82b52d3f51ab5456c" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>win_type</name></member>
      <member refid="classgr__firdes_1a5d1296e7e53019564a8a146fa3a9caaf" prot="public" virt="non-virtual"><scope>gr_firdes</scope><name>window</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

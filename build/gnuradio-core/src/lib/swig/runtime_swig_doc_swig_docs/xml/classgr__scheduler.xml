<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="classgr__scheduler" kind="class" prot="public">
    <compoundname>gr_scheduler</compoundname>
    <derivedcompoundref refid="classgr__scheduler__sts" prot="public" virt="non-virtual">gr_scheduler_sts</derivedcompoundref>
    <derivedcompoundref refid="classgr__scheduler__tpb" prot="public" virt="non-virtual">gr_scheduler_tpb</derivedcompoundref>
    <includes refid="gr__scheduler_8h" local="no">gr_scheduler.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgr__scheduler_1a35163aaf31e92ba884f37513e6f89304" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gr_scheduler::gr_scheduler</definition>
        <argsstring>(gr_flat_flowgraph_sptr ffg, int max_noutput_items)</argsstring>
        <name>gr_scheduler</name>
        <param>
          <type><ref refid="gr__runtime__types_8h_1a00654833ab8b07aacb3b6472acdf486c" kindref="member">gr_flat_flowgraph_sptr</ref></type>
          <declname>ffg</declname>
        </param>
        <param>
          <type>int</type>
          <declname>max_noutput_items</declname>
        </param>
        <briefdescription>
<para>Construct a scheduler and begin evaluating the graph. </para>        </briefdescription>
        <detaileddescription>
<para>The scheduler will continue running until all blocks until they report that they are done or the stop method is called. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/runtime/gr_scheduler.h" line="50"/>
      </memberdef>
      <memberdef kind="function" id="classgr__scheduler_1a997dc366c2a0b1bcdd66e3b145a95a31" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual gr_scheduler::~gr_scheduler</definition>
        <argsstring>()</argsstring>
        <name>~gr_scheduler</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/runtime/gr_scheduler.h" line="52"/>
      </memberdef>
      <memberdef kind="function" id="classgr__scheduler_1a9aa911eac6894694dfb67a59cc4a4e46" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr_scheduler::stop</definition>
        <argsstring>()=0</argsstring>
        <name>stop</name>
        <reimplementedby refid="classgr__scheduler__tpb_1a1d830db53d8d5d2e962d1797fef63213">stop</reimplementedby>
        <reimplementedby refid="classgr__scheduler__sts_1a3f8dd7ae4f1140e7e45b073eaf438c2d">stop</reimplementedby>
        <briefdescription>
<para>Tell the scheduler to stop executing. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/runtime/gr_scheduler.h" line="57"/>
      </memberdef>
      <memberdef kind="function" id="classgr__scheduler_1a27993c1e1a34a5d29a3ede97b731506e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void gr_scheduler::wait</definition>
        <argsstring>()=0</argsstring>
        <name>wait</name>
        <reimplementedby refid="classgr__scheduler__tpb_1a0d3dfd4320dcb92cfcfbdcb91d43bed2">wait</reimplementedby>
        <reimplementedby refid="classgr__scheduler__sts_1a04c1d2ea387752e303586164eac90fc9">wait</reimplementedby>
        <briefdescription>
<para>Block until the graph is done. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/runtime/gr_scheduler.h" line="62"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract scheduler that takes a flattened flow graph and runs it. </para>    </briefdescription>
    <detaileddescription>
<para>Preconditions: details, buffers and buffer readers have been assigned. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="426">
        <label>gr_scheduler_sts</label>
        <link refid="classgr__scheduler__sts"/>
        <childnode refid="425" relation="public-inheritance">
        </childnode>
      </node>
      <node id="425">
        <label>gr_scheduler</label>
        <link refid="classgr__scheduler"/>
      </node>
      <node id="427">
        <label>gr_scheduler_tpb</label>
        <link refid="classgr__scheduler__tpb"/>
        <childnode refid="425" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/runtime/gr_scheduler.h" line="41" bodyfile="/home/alexzh/gr_alex/gnuradio/gnuradio-core/src/lib/runtime/gr_scheduler.h" bodystart="40" bodyend="63"/>
    <listofallmembers>
      <member refid="classgr__scheduler_1a35163aaf31e92ba884f37513e6f89304" prot="public" virt="non-virtual"><scope>gr_scheduler</scope><name>gr_scheduler</name></member>
      <member refid="classgr__scheduler_1a9aa911eac6894694dfb67a59cc4a4e46" prot="public" virt="pure-virtual"><scope>gr_scheduler</scope><name>stop</name></member>
      <member refid="classgr__scheduler_1a27993c1e1a34a5d29a3ede97b731506e" prot="public" virt="pure-virtual"><scope>gr_scheduler</scope><name>wait</name></member>
      <member refid="classgr__scheduler_1a997dc366c2a0b1bcdd66e3b145a95a31" prot="public" virt="virtual"><scope>gr_scheduler</scope><name>~gr_scheduler</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>

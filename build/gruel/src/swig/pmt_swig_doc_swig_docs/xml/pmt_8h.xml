<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="pmt_8h" kind="file">
    <compoundname>pmt.h</compoundname>
    <includes refid="api_8h" local="no">gruel/api.h</includes>
    <includes local="no">boost/intrusive_ptr.hpp</includes>
    <includes local="no">boost/shared_ptr.hpp</includes>
    <includes local="no">boost/any.hpp</includes>
    <includes local="no">complex</includes>
    <includes local="no">string</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">iosfwd</includes>
    <includes local="no">stdexcept</includes>
    <includes refid="pmt__sugar_8h" local="no">gruel/pmt_sugar.h</includes>
    <includedby refid="msg__accepter_8h" local="no">/home/alexzh/gr_alex/gnuradio/gruel/src/include/gruel/msg_accepter.h</includedby>
    <includedby refid="msg__passing_8h" local="no">/home/alexzh/gr_alex/gnuradio/gruel/src/include/gruel/msg_passing.h</includedby>
    <includedby refid="msg__queue_8h" local="no">/home/alexzh/gr_alex/gnuradio/gruel/src/include/gruel/msg_queue.h</includedby>
    <incdepgraph>
      <node id="120">
        <label>boost/shared_ptr.hpp</label>
      </node>
      <node id="119">
        <label>boost/intrusive_ptr.hpp</label>
      </node>
      <node id="116">
        <label>/home/alexzh/gr_alex/gnuradio/gruel/src/include/gruel/pmt.h</label>
        <link refid="pmt.h"/>
        <childnode refid="117" relation="include">
        </childnode>
        <childnode refid="119" relation="include">
        </childnode>
        <childnode refid="120" relation="include">
        </childnode>
        <childnode refid="121" relation="include">
        </childnode>
        <childnode refid="122" relation="include">
        </childnode>
        <childnode refid="123" relation="include">
        </childnode>
        <childnode refid="124" relation="include">
        </childnode>
        <childnode refid="125" relation="include">
        </childnode>
        <childnode refid="126" relation="include">
        </childnode>
        <childnode refid="127" relation="include">
        </childnode>
      </node>
      <node id="124">
        <label>stdint.h</label>
      </node>
      <node id="117">
        <label>gruel/api.h</label>
        <link refid="api_8h"/>
        <childnode refid="118" relation="include">
        </childnode>
      </node>
      <node id="126">
        <label>stdexcept</label>
      </node>
      <node id="123">
        <label>string</label>
      </node>
      <node id="121">
        <label>boost/any.hpp</label>
      </node>
      <node id="118">
        <label>gruel/attributes.h</label>
        <link refid="attributes_8h"/>
      </node>
      <node id="125">
        <label>iosfwd</label>
      </node>
      <node id="127">
        <label>gruel/pmt_sugar.h</label>
        <link refid="pmt__sugar_8h"/>
      </node>
      <node id="122">
        <label>complex</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="128">
        <label>/home/alexzh/gr_alex/gnuradio/gruel/src/include/gruel/pmt.h</label>
        <link refid="pmt.h"/>
        <childnode refid="129" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
        <childnode refid="132" relation="include">
        </childnode>
      </node>
      <node id="131">
        <label>/home/alexzh/gr_alex/gnuradio/gruel/src/include/gruel/msg_passing.h</label>
        <link refid="msg__passing_8h"/>
      </node>
      <node id="132">
        <label>/home/alexzh/gr_alex/gnuradio/gruel/src/include/gruel/msg_queue.h</label>
        <link refid="msg__queue_8h"/>
        <childnode refid="130" relation="include">
        </childnode>
      </node>
      <node id="130">
        <label>/home/alexzh/gr_alex/gnuradio/gruel/src/include/gruel/msg_accepter_msgq.h</label>
        <link refid="msg__accepter__msgq_8h"/>
      </node>
      <node id="129">
        <label>/home/alexzh/gr_alex/gnuradio/gruel/src/include/gruel/msg_accepter.h</label>
        <link refid="msg__accepter_8h"/>
        <childnode refid="130" relation="include">
        </childnode>
        <childnode refid="131" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classpmt_1_1pmt__exception" prot="public">pmt::pmt_exception</innerclass>
    <innerclass refid="classpmt_1_1pmt__wrong__type" prot="public">pmt::pmt_wrong_type</innerclass>
    <innerclass refid="classpmt_1_1pmt__out__of__range" prot="public">pmt::pmt_out_of_range</innerclass>
    <innerclass refid="classpmt_1_1pmt__notimplemented" prot="public">pmt::pmt_notimplemented</innerclass>
    <innernamespace refid="namespacegruel">gruel</innernamespace>
    <innernamespace refid="namespacepmt">pmt</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c++<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2006,2009,2010<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>GNU<sp/>Radio</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>GNU<sp/>Radio<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>3,<sp/>or<sp/>(at<sp/>your<sp/>option)</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>GNU<sp/>Radio<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>GNU<sp/>Radio;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/><sp/>If<sp/>not,<sp/>write<sp/>to</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Boston,<sp/>MA<sp/>02110-1301,<sp/>USA.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDED_PMT_H</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_PMT_H</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="api_8h" kindref="compound">gruel/api.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/intrusive_ptr.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/shared_ptr.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;boost/any.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;complex&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdexcept&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">gruel<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">msg_accepter;</highlight></codeline>
<codeline lineno="38"><highlight class="normal">};</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="namespacepmt" refkind="compound"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">pmt<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" refkind="member"><highlight class="keyword">class<sp/></highlight><highlight class="normal">pmt_base;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>boost::intrusive_ptr&lt;pmt_base&gt;<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a7ca9400508c9dc2bce2ada6322a046ac" kindref="member">intrusive_ptr_add_ref</ref>(pmt_base*);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a98e02ab2d43bf54faf689433997be418" kindref="member">intrusive_ptr_release</ref>(pmt_base*);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="classpmt_1_1pmt__exception" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="classpmt_1_1pmt__exception" kindref="compound">pmt_exception</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::logic_error</highlight></codeline>
<codeline lineno="65"><highlight class="normal">{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="classpmt_1_1pmt__exception" kindref="compound">pmt_exception</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;msg,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="classpmt_1_1pmt__wrong__type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="classpmt_1_1pmt__wrong__type" kindref="compound">pmt_wrong_type</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpmt_1_1pmt__exception" kindref="compound">pmt_exception</ref></highlight></codeline>
<codeline lineno="71"><highlight class="normal">{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><ref refid="classpmt_1_1pmt__wrong__type" kindref="compound">pmt_wrong_type</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;msg,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="74"><highlight class="normal">};</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classpmt_1_1pmt__out__of__range" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="classpmt_1_1pmt__out__of__range" kindref="compound">pmt_out_of_range</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpmt_1_1pmt__exception" kindref="compound">pmt_exception</ref></highlight></codeline>
<codeline lineno="77"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="classpmt_1_1pmt__out__of__range" kindref="compound">pmt_out_of_range</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;msg,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="80"><highlight class="normal">};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="classpmt_1_1pmt__notimplemented" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="classpmt_1_1pmt__notimplemented" kindref="compound">pmt_notimplemented</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classpmt_1_1pmt__exception" kindref="compound">pmt_exception</ref></highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><ref refid="classpmt_1_1pmt__notimplemented" kindref="compound">pmt_notimplemented</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;msg,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="86"><highlight class="normal">};</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="89"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="90"><highlight class="comment"><sp/>*<sp/>Booleans.<sp/><sp/>Two<sp/>constants,<sp/>#t<sp/>and<sp/>#f.</highlight></codeline>
<codeline lineno="91"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="92"><highlight class="comment"><sp/>*<sp/>In<sp/>predicates,<sp/>anything<sp/>that<sp/>is<sp/>not<sp/>#f<sp/>is<sp/>considered<sp/>true.</highlight></codeline>
<codeline lineno="93"><highlight class="comment"><sp/>*<sp/>I.e.,<sp/>there<sp/>is<sp/>a<sp/>single<sp/>false<sp/>value,<sp/>#f.</highlight></codeline>
<codeline lineno="94"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="95"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1ad41a6c124e405727b4b5ea54247005ac" kindref="member">PMT_T</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>\#t<sp/>:<sp/>boolean<sp/>true<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a92bfd358b0758d5edf5a0fac84ab806f" kindref="member">PMT_F</ref>;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>\#f<sp/>:<sp/>boolean<sp/>false<sp/>constant</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a92a9af8c6173fa835ce798120454ca3a" kindref="member" tooltip="Return true if obj is #t or #f, else return false.">pmt_is_bool</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1aa0de7ef2290e89b5bd8124282e04e283" kindref="member" tooltip="Return false if obj is #f, else return true.">pmt_is_true</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a1a4b8301ff2affe08c56bba767d2639a" kindref="member" tooltip="Return true if obj is #f, else return true.">pmt_is_false</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a220a2c274afdf655f66d105b48a4986b" kindref="member" tooltip="Return #f is val is false, else return #t.">pmt_from_bool</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>val);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="comment">//<sp/>else<sp/>raise<sp/>wrong_type<sp/>exception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1aaec724bae01050d64d27fb80eb29a009" kindref="member" tooltip="Return true if val is PMT_T, return false when val is PMT_F,.">pmt_to_bool</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>val);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="116"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="117"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Symbols</highlight></codeline>
<codeline lineno="118"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="119"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a9ae2fcfaefb907989660f09d342c7fa2" kindref="member" tooltip="Return true if obj is a symbol, else false.">pmt_is_symbol</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>obj);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a9175b04fc88cb7be663ee7b7925dfda6" kindref="member" tooltip="Return the symbol whose name is s.">pmt_string_to_symbol</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a57a5ae8877c9b3b24636a07e0a3596e1" kindref="member" tooltip="Alias for pmt_string_to_symbol.">pmt_intern</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;s);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacepmt_1a736cbad10638be8857ab42e8958163e7" kindref="member">pmt_symbol_to_string</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>sym);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="138"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="139"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Numbers:<sp/>we<sp/>support<sp/>integer,<sp/>real<sp/>and<sp/>complex</highlight></codeline>
<codeline lineno="140"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="141"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a616845e65ea77d594240618fc3efff2c" kindref="member" tooltip="Return true if obj is any kind of number, else false.">pmt_is_number</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="147"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="148"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Integers</highlight></codeline>
<codeline lineno="149"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="150"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ac7fc02a500f2f9d8e07a52418897d9e9" kindref="member" tooltip="Return true if x is an integer number, else false.">pmt_is_integer</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1ac4ac7825fbcc1accdc6a9ada084f5f96" kindref="member" tooltip="Return the pmt value that represents the integer x.">pmt_from_long</ref>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1af7cbc1b15358aa1a816cd86e09e2290f" kindref="member" tooltip="Convert pmt to long if possible.">pmt_to_long</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="168"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="169"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t</highlight></codeline>
<codeline lineno="170"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="171"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a720ebd40bdf0421cb3d6fa529d019fc3" kindref="member" tooltip="Return true if x is an uint64 number, else false.">pmt_is_uint64</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1ad23c52d29b752f449c03213abb8ec263" kindref="member" tooltip="Return the pmt value that represents the uint64 x.">pmt_from_uint64</ref>(uint64_t<sp/>x);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>uint64_t<sp/><ref refid="namespacepmt_1af173bcf7561b2cb6863e835b510ee68f" kindref="member" tooltip="Convert pmt to uint64 if possible.">pmt_to_uint64</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="189"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="190"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Reals</highlight></codeline>
<codeline lineno="191"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="192"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="195"><highlight class="comment"><sp/>*<sp/>\brief<sp/>Return<sp/>true<sp/>if<sp/>\p<sp/>obj<sp/>is<sp/>a<sp/>real<sp/>number,<sp/>else<sp/>false.</highlight></codeline>
<codeline lineno="196"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab9c57465a4b077ddc442f03dbe15134b" kindref="member">pmt_is_real</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1aa4f8469d075bcccc81553ccb55408265" kindref="member" tooltip="Return the pmt value that represents double x.">pmt_from_double</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a936b17e4b5b737fe2483007570b463ec" kindref="member" tooltip="Convert pmt to double if possible.">pmt_to_double</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="212"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="213"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Complex</highlight></codeline>
<codeline lineno="214"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="215"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a3347587caac513a1ed660accf25035bb" kindref="member" tooltip="return true if obj is a complex number, false otherwise.">pmt_is_complex</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a16f57dcca0c41d06d196d9773a594216" kindref="member" tooltip="Return a complex number constructed of the given real and imaginary parts.">pmt_make_rectangular</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>re,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>im);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>std::complex&lt;double&gt;<sp/><ref refid="namespacepmt_1a72e558a42f5f73705150ade114188abb" kindref="member">pmt_to_complex</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>z);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="232"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="233"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Pairs</highlight></codeline>
<codeline lineno="234"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="235"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1abacba9cd6ea4261fee4bfb67e7133dad" kindref="member">PMT_NIL</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>the<sp/>empty<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1af9b153d2aae9621011d31e03ca50c0e9" kindref="member" tooltip="Return true if x is the empty list, otherwise return false.">pmt_is_null</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x);</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a980b699b577a91f635985610bbaec234" kindref="member" tooltip="Return true if obj is a pair, else false.">pmt_is_pair</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>obj);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1af049aaa257cc52e35a2ef8ed6a75b45b" kindref="member" tooltip="Return a newly allocated pair whose car is x and whose cdr is y.">pmt_cons</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a4655d415ba202f88f7b1477eb2037f46" kindref="member" tooltip="If pair is a pair, return the car of the pair, otherwise raise wrong_type.">pmt_car</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>pair);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a386125587526af1bd94f359bdb60e09a" kindref="member" tooltip="If pair is a pair, return the cdr of the pair, otherwise raise wrong_type.">pmt_cdr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>pair);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a99d30c6140de466c0bc5fb9e940bc5c5" kindref="member" tooltip="Stores value in the car field of pair.">pmt_set_car</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>pair,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>value);</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a282853f5cd5477fab1717c04a544239d" kindref="member" tooltip="Stores value in the cdr field of pair.">pmt_set_cdr</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>pair,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>value);</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a9932a77ec27070a1b829d0c3c8132349" kindref="member">pmt_caar</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>pair);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1ac9930f20227638d32112736bb0273aea" kindref="member">pmt_cadr</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>pair);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a5f5fb0d63b7779195f25ee4163bb5584" kindref="member">pmt_cdar</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>pair);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1ac4f84d561070146183dd041d5a9c6f77" kindref="member">pmt_cddr</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>pair);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a703a2eb191cb64d3c2f388fe26740fc5" kindref="member">pmt_caddr</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>pair);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a33d780808e8647dc40b1e31dbd003d75" kindref="member">pmt_cadddr</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>pair);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="268"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="269"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Tuples</highlight></codeline>
<codeline lineno="270"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="271"><highlight class="comment"><sp/>*<sp/>Store<sp/>a<sp/>fixed<sp/>number<sp/>of<sp/>objects.<sp/><sp/>Tuples<sp/>are<sp/>not<sp/>modifiable,<sp/>and<sp/>thus</highlight></codeline>
<codeline lineno="272"><highlight class="comment"><sp/>*<sp/>are<sp/>excellent<sp/>for<sp/>use<sp/>as<sp/>messages.<sp/><sp/>Indexing<sp/>is<sp/>zero<sp/>based.</highlight></codeline>
<codeline lineno="273"><highlight class="comment"><sp/>*<sp/>Access<sp/>time<sp/>to<sp/>an<sp/>element<sp/>is<sp/>O(1).</highlight></codeline>
<codeline lineno="274"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="275"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1aac80c007d245571c00789dec4f095025" kindref="member" tooltip="Return true if x is a tuple, othewise false.">pmt_is_tuple</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a3b7024e45111b1f37b1b4ec700bb5d3f" kindref="member">pmt_make_tuple</ref>();</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a3b7024e45111b1f37b1b4ec700bb5d3f" kindref="member">pmt_make_tuple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e0);</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a3b7024e45111b1f37b1b4ec700bb5d3f" kindref="member">pmt_make_tuple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e1);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a3b7024e45111b1f37b1b4ec700bb5d3f" kindref="member">pmt_make_tuple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e2);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a3b7024e45111b1f37b1b4ec700bb5d3f" kindref="member">pmt_make_tuple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e3);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a3b7024e45111b1f37b1b4ec700bb5d3f" kindref="member">pmt_make_tuple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e4);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a3b7024e45111b1f37b1b4ec700bb5d3f" kindref="member">pmt_make_tuple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e5);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a3b7024e45111b1f37b1b4ec700bb5d3f" kindref="member">pmt_make_tuple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e6);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a3b7024e45111b1f37b1b4ec700bb5d3f" kindref="member">pmt_make_tuple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e6,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e7);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a3b7024e45111b1f37b1b4ec700bb5d3f" kindref="member">pmt_make_tuple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e6,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e8);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a3b7024e45111b1f37b1b4ec700bb5d3f" kindref="member">pmt_make_tuple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e0,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e6,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e7,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e8,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;e9);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1aa48b0b932498da5f7861a80d8b996d05" kindref="member">pmt_to_tuple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;x);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a6122da1af9ccf8fe83f44a694365f4e1" kindref="member">pmt_tuple_ref</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;tuple,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="304"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="305"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Vectors</highlight></codeline>
<codeline lineno="306"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="307"><highlight class="comment"><sp/>*<sp/>These<sp/>vectors<sp/>can<sp/>hold<sp/>any<sp/>kind<sp/>of<sp/>objects.<sp/><sp/>Indexing<sp/>is<sp/>zero<sp/>based.</highlight></codeline>
<codeline lineno="308"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="309"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a7ea3ca32dd1c7465e0cc1de892ab438a" kindref="member" tooltip="Return true if x is a vector, othewise false.">pmt_is_vector</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a02649eb318d73294857a9baa5b9f159d" kindref="member" tooltip="Make a vector of length k, with initial values set to fill.">pmt_make_vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>fill);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a5bdfa6646be0adb56530c3ad17ed968d" kindref="member">pmt_vector_ref</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>vector,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1aff40b940757218048e17b3a295360980" kindref="member" tooltip="Store obj in position k.">pmt_vector_set</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>vector,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a4789afe684c5bcb16a4140bdda7ab932" kindref="member" tooltip="Store fill in every position of vector.">pmt_vector_fill</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>vector,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>fill);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="330"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="331"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Binary<sp/>Large<sp/>Objects<sp/>(BLOBs)</highlight></codeline>
<codeline lineno="332"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="333"><highlight class="comment"><sp/>*<sp/>Handy<sp/>for<sp/>passing<sp/>around<sp/>uninterpreted<sp/>chunks<sp/>of<sp/>memory.</highlight></codeline>
<codeline lineno="334"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="335"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a2d624317749c54ebc164c125487b0b3a" kindref="member" tooltip="Return true if x is a blob, othewise false.">pmt_is_blob</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a1ad6236cd115201a388ffe3a2bf45ff3" kindref="member" tooltip="Make a blob given a pointer and length in bytes.">pmt_make_blob</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="namespacepmt_1a658f178fde294cf9d00bd42a30924b00" kindref="member" tooltip="Return a pointer to the blob&amp;#39;s data.">pmt_blob_data</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>blob);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ad8e58a3de2f0f06bb03a40984e059a1c" kindref="member" tooltip="Return the blob&amp;#39;s length in bytes.">pmt_blob_length</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>blob);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"></codeline>
<codeline lineno="386"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1abe4c461b9c01bdc155a54c941dda1a13" kindref="member" tooltip="true if x is any kind of uniform numeric vector">pmt_is_uniform_vector</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ae20b79d8e1d189978142946ef4e0d07e" kindref="member">pmt_is_u8vector</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a1550d3aca7b789b2ebd2375d620775a2" kindref="member">pmt_is_s8vector</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a1357b6b396563ca1aee6095756611bb5" kindref="member">pmt_is_u16vector</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a081c6e0023f49f902293018371bea69e" kindref="member">pmt_is_s16vector</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a604a5e2e2a3a3b881a4e504cee592db4" kindref="member">pmt_is_u32vector</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a6ffb793f662b10fb9576b2c5576cf334" kindref="member">pmt_is_s32vector</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ae4d87b20ba2a3a9d6db6437d183be986" kindref="member">pmt_is_u64vector</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a74f6bd5b31bee4086e60ed28951e9f3a" kindref="member">pmt_is_s64vector</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a8600c0cc1b2b486aed9fe171345dc1eb" kindref="member">pmt_is_f32vector</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a005d0901b3b7d8d170d8e70428fa3685" kindref="member">pmt_is_f64vector</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a6b1740bc274ac4296b83318c313d5596" kindref="member">pmt_is_c32vector</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1adf7de0af37c4bd2cf627f3bac8b1d9cd" kindref="member">pmt_is_c64vector</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a0ed4087e2d552220099bc47c8dcc7da1" kindref="member">pmt_make_u8vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>uint8_t<sp/>fill);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1aecdc41ac8b003a5ddec87398eb3c9a25" kindref="member">pmt_make_s8vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>int8_t<sp/>fill);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a92152768355ad9287037aafd317de5ab" kindref="member">pmt_make_u16vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>uint16_t<sp/>fill);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a0f9ef340402f04b86af6504c9eb4b3b7" kindref="member">pmt_make_s16vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>int16_t<sp/>fill);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a4f49370774dd39edb85216841bc3139c" kindref="member">pmt_make_u32vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>uint32_t<sp/>fill);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1ae7d3c62728a50c8a4f76db56aa54f5ae" kindref="member">pmt_make_s32vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>int32_t<sp/>fill);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1aa2fc5c3f476d8e0faad7ed045c76eefc" kindref="member">pmt_make_u64vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>uint64_t<sp/>fill);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1adc9b4134cc41bd54db3f31e762fcc34f" kindref="member">pmt_make_s64vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>int64_t<sp/>fill);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a9646c961e52e6e0b189a767b4f187a7e" kindref="member">pmt_make_f32vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>fill);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a54f194d45b7f04045bac2ccd463ff9ee" kindref="member">pmt_make_f64vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fill);</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1aa7f431c860783da77bf3f92cdc544ea3" kindref="member">pmt_make_c32vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>std::complex&lt;float&gt;<sp/>fill);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a8b3b32efb609777e00d9ab12c7adbd5a" kindref="member">pmt_make_c64vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>std::complex&lt;double&gt;<sp/>fill);</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1ac2b133de1f952021772213c72afb4c48" kindref="member">pmt_init_u8vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>*data);</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1aa633f99d0ec620f2c4e918a57049a55b" kindref="member">pmt_init_s8vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int8_t<sp/>*data);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a615785b165cc144c29c64fabffedcc23" kindref="member">pmt_init_u16vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*data);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a069881b7c34a7830550794275b72a5f5" kindref="member">pmt_init_s16vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int16_t<sp/>*data);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a44c675223e48031ec4a7e1845f0486a0" kindref="member">pmt_init_u32vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*data);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a12be2cf40d2392cff899a51b910a0a8e" kindref="member">pmt_init_s32vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>*data);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a58d4d143aecf38d5300419cec329cd17" kindref="member">pmt_init_u64vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>*data);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a753559601a857fbf02b0eeffcaffc9a3" kindref="member">pmt_init_s64vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>*data);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a0059adbddf90601378cb4ffc407d7719" kindref="member">pmt_init_f32vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a633a0cbfa644de7a8cb7217dce79ad75" kindref="member">pmt_init_f64vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*data);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a2fff0237fbd4452a8baf98affe9415e5" kindref="member">pmt_init_c32vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/>*data);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1ac36714d0991432b56d0ab9c897198de2" kindref="member">pmt_init_c64vector</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*data);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>uint8_t<sp/><sp/><ref refid="namespacepmt_1a90bde54398733a0d7077d8345899f510" kindref="member">pmt_u8vector_ref</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>int8_t<sp/><sp/><sp/><ref refid="namespacepmt_1a7e59234e93bdf7c8a98616dd1965eb3e" kindref="member">pmt_s8vector_ref</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>uint16_t<sp/><ref refid="namespacepmt_1af67006d8eb60694b80177b4ec0c77b8f" kindref="member">pmt_u16vector_ref</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>int16_t<sp/><sp/><ref refid="namespacepmt_1a7b58ae391e25f744c53ed740aa9424fa" kindref="member">pmt_s16vector_ref</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>uint32_t<sp/><ref refid="namespacepmt_1a5b97e3eb70fd4693a0e32fa8d46fbda2" kindref="member">pmt_u32vector_ref</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>int32_t<sp/><sp/><ref refid="namespacepmt_1a209cf240a9e613126e17174e7c97d3c7" kindref="member">pmt_s32vector_ref</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>uint64_t<sp/><ref refid="namespacepmt_1a9415eb2c6d0ce74f6adf5efd31d20dd5" kindref="member">pmt_u64vector_ref</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>int64_t<sp/><sp/><ref refid="namespacepmt_1a1bd403ef1712ca6a9634dc951226e100" kindref="member">pmt_s64vector_ref</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacepmt_1a14c29e839a8beab8ab539424f697f22b" kindref="member">pmt_f32vector_ref</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/><ref refid="namespacepmt_1a35ca3d96ba1142515beb65da2e46653d" kindref="member">pmt_f64vector_ref</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>std::complex&lt;float&gt;<sp/><sp/><ref refid="namespacepmt_1a1f662b1e8765d02f68ab877732c7fbe7" kindref="member">pmt_c32vector_ref</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>std::complex&lt;double&gt;<sp/><ref refid="namespacepmt_1afc8bc9909aef8d18971eda7a92d72490" kindref="member">pmt_c64vector_ref</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k);</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1abbd1af5de40510c34a36312b2c9baef8" kindref="member">pmt_u8vector_set</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>uint8_t<sp/>x);<sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>v[k]<sp/>=<sp/>x</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a9382300d3201ec44c9947b75e858b17c" kindref="member">pmt_s8vector_set</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>int8_t<sp/>x);</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1adcbcfa28b73f37e567e9b58b7c997b3d" kindref="member">pmt_u16vector_set</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>uint16_t<sp/>x);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a11f9cbdd233b9e7373dea2a173031a35" kindref="member">pmt_s16vector_set</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>int16_t<sp/>x);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab412c9772dfefae5254f93c25a898b79" kindref="member">pmt_u32vector_set</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>uint32_t<sp/>x);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a5b2807af0321674315b0c0315f17f375" kindref="member">pmt_s32vector_set</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>int32_t<sp/>x);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a8f817fd7dcb1190bd78c9263d3c82770" kindref="member">pmt_u64vector_set</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>uint64_t<sp/>x);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a33e81f7aa8e0e56115b00a99004993c4" kindref="member">pmt_s64vector_set</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>int64_t<sp/>x);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a313a10c7596a4ffc61c16dab89111b13" kindref="member">pmt_f32vector_set</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab14d232eff869e629a90a9f714508663" kindref="member">pmt_f64vector_set</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a82c27ca537aafe2a8f46398b0bf83354" kindref="member">pmt_c32vector_set</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>std::complex&lt;float&gt;<sp/>x);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a156c09900c7070c40d0997f30f65952b" kindref="member">pmt_c64vector_set</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>k,<sp/>std::complex&lt;double&gt;<sp/>x);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>const<sp/>pointers<sp/>to<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="namespacepmt_1a48cdc068247f508fb29620e88517d4fc" kindref="member">pmt_uniform_vector_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>works<sp/>with<sp/>any;<sp/>len<sp/>is<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/><sp/>*<ref refid="namespacepmt_1a7b8d0d77c5ac3de534056924aae60656" kindref="member">pmt_u8vector_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int8_t<sp/><sp/><sp/>*<ref refid="namespacepmt_1a7e99d569068808c1d46d85713815bf45" kindref="member">pmt_s8vector_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint16_t<sp/>*<ref refid="namespacepmt_1a5731d3143bde1f3aa885d9237110424e" kindref="member">pmt_u16vector_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int16_t<sp/><sp/>*<ref refid="namespacepmt_1a56212892b67898c812abd5061c470159" kindref="member">pmt_s16vector_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>*<ref refid="namespacepmt_1a11031fcd081f8372d1af14459e5a80d6" kindref="member">pmt_u32vector_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/><sp/>*<ref refid="namespacepmt_1aa680f23eb75f39da531f68d1cce9e5e6" kindref="member">pmt_s32vector_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>*<ref refid="namespacepmt_1acf5b1dc260e2a922cf5aa2f6a5364ce1" kindref="member">pmt_u64vector_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/><sp/>*<ref refid="namespacepmt_1ade19040c3564d682304d9a20a078c78b" kindref="member">pmt_s64vector_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="namespacepmt_1ae6f02485e5c6452faee3f8bba45725c2" kindref="member">pmt_f32vector_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/>*<ref refid="namespacepmt_1a31240cf1ca827a8febd4a031b69a0612" kindref="member">pmt_f64vector_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;float&gt;<sp/><sp/>*<ref refid="namespacepmt_1abf0c63e50b0ca1eab95c4b13cd6edffb" kindref="member">pmt_c32vector_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>*<ref refid="namespacepmt_1a466bf2b78503036409edab5a256e3754" kindref="member">pmt_c64vector_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>non-const<sp/>pointers<sp/>to<sp/>the<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="namespacepmt_1af8e8944bdad4f27c998332abd3da4150" kindref="member">pmt_uniform_vector_writable_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>works<sp/>with<sp/>any;<sp/>len<sp/>is<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>uint8_t<sp/><sp/>*<ref refid="namespacepmt_1af6cc10a04c4ceae4d2a50aba01f27b3e" kindref="member">pmt_u8vector_writable_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>int8_t<sp/><sp/><sp/>*<ref refid="namespacepmt_1ac1dd142a455f1fa34990fa77d0444c17" kindref="member">pmt_s8vector_writable_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>uint16_t<sp/>*<ref refid="namespacepmt_1a9048cf5a0d19319c5971fc8347809a29" kindref="member">pmt_u16vector_writable_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>int16_t<sp/><sp/>*<ref refid="namespacepmt_1a3f2c3e15a883feabc6003e382a29eeb2" kindref="member">pmt_s16vector_writable_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>uint32_t<sp/>*<ref refid="namespacepmt_1acdf2c4184d99dd08d39ad6b78930f9c7" kindref="member">pmt_u32vector_writable_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>int32_t<sp/><sp/>*<ref refid="namespacepmt_1a63fddde91f33f06037c3963086a0de49" kindref="member">pmt_s32vector_writable_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>uint64_t<sp/>*<ref refid="namespacepmt_1a6ab85af921a0e61445a17081bc2463fe" kindref="member">pmt_u64vector_writable_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>int64_t<sp/><sp/>*<ref refid="namespacepmt_1a038fe0af497789d238df2bd2e3e1ea2c" kindref="member">pmt_s64vector_writable_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>*<ref refid="namespacepmt_1afc7f8d6306a3ca55a642576076ea3c69" kindref="member">pmt_f32vector_writable_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><sp/><sp/>*<ref refid="namespacepmt_1ae067d2787f8936f57e620aa76bc22cb4" kindref="member">pmt_f64vector_writable_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>std::complex&lt;float&gt;<sp/><sp/>*<ref refid="namespacepmt_1a92cb1dc2066d997aae730d7aac5c4d0e" kindref="member">pmt_c32vector_writable_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>std::complex&lt;double&gt;<sp/>*<ref refid="namespacepmt_1a8c13f364b64715d9822a6a35b54956ef" kindref="member">pmt_c64vector_writable_elements</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>&amp;len);<sp/></highlight><highlight class="comment">//&lt;<sp/>len<sp/>is<sp/>in<sp/>elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="488"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="489"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Dictionary<sp/>(a.k.a<sp/>associative<sp/>array,<sp/>hash,<sp/>map)</highlight></codeline>
<codeline lineno="490"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="491"><highlight class="comment"><sp/>*<sp/>This<sp/>is<sp/>a<sp/>functional<sp/>data<sp/>structure<sp/>that<sp/>is<sp/>persistent.<sp/><sp/>Updating<sp/>a</highlight></codeline>
<codeline lineno="492"><highlight class="comment"><sp/>*<sp/>functional<sp/>data<sp/>structure<sp/>does<sp/>not<sp/>destroy<sp/>the<sp/>existing<sp/>version,<sp/>but</highlight></codeline>
<codeline lineno="493"><highlight class="comment"><sp/>*<sp/>rather<sp/>creates<sp/>a<sp/>new<sp/>version<sp/>that<sp/>coexists<sp/>with<sp/>the<sp/>old.</highlight></codeline>
<codeline lineno="494"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="495"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a4c92d060166321056f00ec5cb4690f56" kindref="member" tooltip="Return true if obj is a dictionary.">pmt_is_dict</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;obj);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a1b693d7111cf0ed21c62d546f9f0a4c6" kindref="member" tooltip="Make an empty dictionary.">pmt_make_dict</ref>();</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1aebcc6302548a69c3d0653a8abdd42999" kindref="member" tooltip="Return a new dictionary with key associated with value.">pmt_dict_add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;dict,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;value);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a82d0974c3d1367b5c78f84801be21807" kindref="member" tooltip="Return a new dictionary with key removed.">pmt_dict_delete</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;dict,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;key);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><sp/><ref refid="namespacepmt_1a12454dc2ceb8c1a167569dfd931677ab" kindref="member" tooltip="Return true if key exists in dict.">pmt_dict_has_key</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;dict,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;key);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1addba630f2fea5c254e38661abfa8e728" kindref="member" tooltip="If key exists in dict, return associated value; otherwise return not_found.">pmt_dict_ref</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;dict,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;not_found);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a087e46b0b1ae652b30f507c642e40665" kindref="member" tooltip="Return list of (key . value) pairs.">pmt_dict_items</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>dict);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a7a6fb3c0f11694c8a9d649d2b3110d18" kindref="member" tooltip="Return list of keys.">pmt_dict_keys</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>dict);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a7904943c96b954cc3b55423b98d69c8e" kindref="member" tooltip="Return list of values.">pmt_dict_values</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>dict);</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="525"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="526"><highlight class="comment"><sp/>*<sp/><sp/><sp/>Any<sp/>(wraps<sp/>boost::any<sp/>--<sp/>can<sp/>be<sp/>used<sp/>to<sp/>wrap<sp/>pretty<sp/>much<sp/>anything)</highlight></codeline>
<codeline lineno="527"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="528"><highlight class="comment"><sp/>*<sp/>Cannot<sp/>be<sp/>serialized<sp/>or<sp/>used<sp/>across<sp/>process<sp/>boundaries.</highlight></codeline>
<codeline lineno="529"><highlight class="comment"><sp/>*<sp/>See<sp/>http://www.boost.org/doc/html/any.html</highlight></codeline>
<codeline lineno="530"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="531"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a53e88a56f8e8f67d3fa532f90a87aa12" kindref="member" tooltip="Return true if obj is an any.">pmt_is_any</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a4011422f166ce53a5ec1fab08022912b" kindref="member" tooltip="make an any">pmt_make_any</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::any<sp/>&amp;any);</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>boost::any<sp/><ref refid="namespacepmt_1ae3b88f89b7a5714e9495694cb78142f7" kindref="member" tooltip="Return underlying boost::any.">pmt_any_ref</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="541"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a7575287c13591a699c57fd73a6014a26" kindref="member" tooltip="Store any in obj.">pmt_any_set</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>boost::any<sp/>&amp;any);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="547"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="548"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/>msg_accepter<sp/>--<sp/>pmt<sp/>representation<sp/>of<sp/>gruel::msg_accepter</highlight></codeline>
<codeline lineno="549"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="550"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a830574292e33350ba8eda2c180fbe4c7" kindref="member" tooltip="Return true if obj is a msg_accepter.">pmt_is_msg_accepter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;obj);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1acbbdd8d6d157f6e8ac245622c0a91b9d" kindref="member" tooltip="make a msg_accepter">pmt_make_msg_accepter</ref>(boost::shared_ptr&lt;gruel::msg_accepter&gt;<sp/>ma);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>boost::shared_ptr&lt;gruel::msg_accepter&gt;<sp/><ref refid="namespacepmt_1ace122e1b2c1cc95cddf393761772b306" kindref="member" tooltip="Return underlying msg_accepter.">pmt_msg_accepter_ref</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>&amp;obj);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="561"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="562"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>General<sp/>functions</highlight></codeline>
<codeline lineno="563"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="564"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a333a5ba7eb3c3d896c2f642c093a0110" kindref="member" tooltip="Return true if x and y are the same object; otherwise return false.">pmt_eq</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a5d51db697ef5ce7a27305e78e43be95e" kindref="member" tooltip="Return true if x and y should normally be regarded as the same object, else false.">pmt_eqv</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a65215a60439e06781a250c16f6266f89" kindref="member">pmt_equal</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a76684f2c30f1f0134f526dababa3aa89" kindref="member" tooltip="Return the number of elements in v.">pmt_length</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>v);</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a6b3881b0ad0e35682776e1882aab7797" kindref="member" tooltip="Find the first pair in alist whose car field is obj and return that pair.">pmt_assq</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>alist);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a76cb5037e87ed1059e9cd368e0f070be" kindref="member" tooltip="Find the first pair in alist whose car field is obj and return that pair.">pmt_assv</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>alist);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a1b46e28dadff1dbefc33854e0174b8fa" kindref="member" tooltip="Find the first pair in alist whose car field is obj and return that pair.">pmt_assoc</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>alist);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1adedfc1a4b0831f372eac7251ac1ee1cb" kindref="member" tooltip="Apply proc element-wise to the elements of list and returns a list of the results, in order.">pmt_map</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>proc(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;),<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>list);</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1ae03131ca39632be27b6485db29da2393" kindref="member" tooltip="reverse list.">pmt_reverse</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>list);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a779830f02252a1ac917885bf8bd47fb6" kindref="member" tooltip="destructively reverse list.">pmt_reverse_x</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>list);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight></codeline>
<codeline lineno="652"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref></highlight></codeline>
<codeline lineno="653"><highlight class="normal">pmt_acons(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>x,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>y,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>a)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1af049aaa257cc52e35a2ef8ed6a75b45b" kindref="member" tooltip="Return a newly allocated pair whose car is x and whose cdr is y.">pmt_cons</ref>(<ref refid="namespacepmt_1af049aaa257cc52e35a2ef8ed6a75b45b" kindref="member" tooltip="Return a newly allocated pair whose car is x and whose cdr is y.">pmt_cons</ref>(x,<sp/>y),<sp/>a);</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a56e3ea8cf68ee7e413e9ee6ad9d54420" kindref="member" tooltip="locates nth element of   list where the car is the &amp;#39;zeroth&amp;#39; element.">pmt_nth</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>list);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="667"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a1afb7fba6d2a43a19f7e10c8ab0c75e1" kindref="member" tooltip="returns the tail of list that would be obtained by calling cdr n times in succession.">pmt_nthcdr</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>n,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>list);</highlight></codeline>
<codeline lineno="668"><highlight class="normal"></highlight></codeline>
<codeline lineno="674"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a5390ffee054496a5ad83600ea274ad24" kindref="member" tooltip="Return the first sublist of list whose car is obj. If obj does not occur in list, then #f is returned...">pmt_memq</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>list);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a1473c4e093f0581315197188c723486d" kindref="member" tooltip="Return the first sublist of list whose car is obj. If obj does not occur in list, then #f is returned...">pmt_memv</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>list);</highlight></codeline>
<codeline lineno="682"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1aa1e2e87acf3be89fec3c3d3d4a7fe2ea" kindref="member" tooltip="Return the first sublist of list whose car is obj. If obj does not occur in list, then #f is returned...">pmt_member</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>list);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a86419a2daec50e5597cb7ce6c28db6f3" kindref="member" tooltip="Return true if every element of list1 appears in list2, and false otherwise. Comparisons are done wit...">pmt_subsetp</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>list1,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>list2);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a676fbe22b8cfd18fb62305023eb153a1" kindref="member" tooltip="Return a list of length 1 containing x1.">pmt_list1</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x1);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1adf2db75f11a2af407c8f22c8e141e668" kindref="member" tooltip="Return a list of length 2 containing x1, x2.">pmt_list2</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x2);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a6ca2161f588b1fd1d453d8f1589c1d42" kindref="member" tooltip="Return a list of length 3 containing x1, x2, x3.">pmt_list3</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x3);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a7ab7f2be52ec8aa72f6391d598700f7a" kindref="member" tooltip="Return a list of length 4 containing x1, x2, x3, x4.">pmt_list4</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x4);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1ab416c50be05e8bff098a4e6486a31a9b" kindref="member" tooltip="Return a list of length 5 containing x1, x2, x3, x4, x5.">pmt_list5</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x5);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a5a6ce26b214adcdd4358f2da937a4cd2" kindref="member" tooltip="Return a list of length 6 containing x1, x2, x3, x4, x5, x6.">pmt_list6</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x2,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x3,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x4,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x5,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>x6);</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1ac5510b07208bc3d3705aac0cacab5d3e" kindref="member" tooltip="Return list with item added to it.">pmt_list_add</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>list,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref>&amp;<sp/>item);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="734"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="735"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>read<sp/>/<sp/>write</highlight></codeline>
<codeline lineno="736"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="737"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1acdc63dbe8e2a53dfa065b58eba3f8ceb" kindref="member">PMT_EOF</ref>;<sp/><sp/><sp/></highlight><highlight class="comment">//&lt;<sp/>The<sp/>end<sp/>of<sp/>file<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1a762adbb598bbf7881d4f304b9b701870" kindref="member" tooltip="return true if obj is the EOF object, otherwise return false.">pmt_is_eof_object</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a74d783fbff16a7120b4b3aa5d4496b3d" kindref="member">pmt_read</ref>(std::istream<sp/>&amp;port);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1afc9b38978f8c91be90e17580e70f4f40" kindref="member">pmt_write</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj,<sp/>std::ostream<sp/>&amp;port);</highlight></codeline>
<codeline lineno="764"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>std::string<sp/><ref refid="namespacepmt_1aa0313943107adc90729d8d72396daaf2" kindref="member">pmt_write_string</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>std::ostream&amp;<sp/><ref refid="namespacepmt_1a00bbbca4612cf6112cac5d506199f57e" kindref="member">operator&lt;&lt;</ref>(std::ostream<sp/>&amp;os,<sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1aef241cfd8cabf5a7e363d7041ccbe1bb" kindref="member" tooltip="Write pmt string representation to stdout.">pmt_print</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>v);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="781"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="782"><highlight class="comment"><sp/>*<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>portable<sp/>byte<sp/>stream<sp/>representation</highlight></codeline>
<codeline lineno="783"><highlight class="comment"><sp/>*<sp/>------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="784"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1abd8e2c3ab8ea55b273b9d042814a075d" kindref="member" tooltip="Write portable byte-serial representation of obj to sink.">pmt_serialize</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj,<sp/>std::streambuf<sp/>&amp;sink);</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a60fd58fe554cbeef5440b3ffb2814d8d" kindref="member" tooltip="Create obj from portable byte-serial representation.">pmt_deserialize</ref>(std::streambuf<sp/>&amp;source);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal"></highlight></codeline>
<codeline lineno="796"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacepmt_1ad483e5c06e7a31b5818f0baabb167854" kindref="member">pmt_dump_sizeof</ref>();<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>debugging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="797"><highlight class="normal"></highlight></codeline>
<codeline lineno="801"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/>std::string<sp/><ref refid="namespacepmt_1a9ec30079614ead54081b29c3473181be" kindref="member" tooltip="Provide a simple string generating interface to pmt&amp;#39;s serialize function.">pmt_serialize_str</ref>(<ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/>obj);</highlight></codeline>
<codeline lineno="802"><highlight class="normal"></highlight></codeline>
<codeline lineno="806"><highlight class="normal"><ref refid="api_8h_1af4aaed4185febb5244160f8484a6bc16" kindref="member">GRUEL_API</ref><sp/><ref refid="namespacepmt_1ab4b70d9293452eb74dd07c670e6811fa" kindref="member" tooltip="typedef for shared pointer (transparent reference counting). See http://www.boost.org/libs/smart_ptr/smart_ptr.htm">pmt_t</ref><sp/><ref refid="namespacepmt_1a21ef652ea9953cc509d0f112a10a1cf0" kindref="member" tooltip="Provide a simple string generating interface to pmt&amp;#39;s deserialize function.">pmt_deserialize_str</ref>(std::string<sp/>str);</highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal">}<sp/></highlight><highlight class="comment">/*<sp/>namespace<sp/>pmt<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="pmt__sugar_8h" kindref="compound">gruel/pmt_sugar.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDED_PMT_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/alexzh/gr_alex/gnuradio/gruel/src/include/gruel/pmt.h"/>
  </compounddef>
</doxygen>

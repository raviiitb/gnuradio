# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_fcd_swig', [dirname(__file__)])
        except ImportError:
            import _fcd_swig
            return _fcd_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_fcd_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _fcd_swig = swig_import_helper()
    del swig_import_helper
else:
    import _fcd_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _fcd_swig.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _fcd_swig.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """incr(self, size_t n = 1) -> SwigPyIterator"""
        return _fcd_swig.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """decr(self, size_t n = 1) -> SwigPyIterator"""
        return _fcd_swig.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _fcd_swig.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(self, SwigPyIterator x) -> bool"""
        return _fcd_swig.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _fcd_swig.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _fcd_swig.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _fcd_swig.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _fcd_swig.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _fcd_swig.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _fcd_swig.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _fcd_swig.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _fcd_swig.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _fcd_swig.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _fcd_swig.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _fcd_swig.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _fcd_swig.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)


def fcd_make_source_c(device_name = ""):
  """fcd_make_source_c(string device_name = "") -> fcd_source_c_sptr"""
  return _fcd_swig.fcd_make_source_c(device_name)
class fcd_source_c(object):
    """Proxy of C++ fcd_source_c class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def set_freq(self, *args):
        """
        set_freq(self, int freq)
        set_freq(self, float freq)
        """
        return _fcd_swig.fcd_source_c_set_freq(self, *args)

    def set_freq_khz(self, *args, **kwargs):
        """set_freq_khz(self, int freq)"""
        return _fcd_swig.fcd_source_c_set_freq_khz(self, *args, **kwargs)

    def set_lna_gain(self, *args, **kwargs):
        """set_lna_gain(self, float gain)"""
        return _fcd_swig.fcd_source_c_set_lna_gain(self, *args, **kwargs)

    def set_mixer_gain(self, *args, **kwargs):
        """set_mixer_gain(self, float gain)"""
        return _fcd_swig.fcd_source_c_set_mixer_gain(self, *args, **kwargs)

    def set_freq_corr(self, *args, **kwargs):
        """set_freq_corr(self, int ppm)"""
        return _fcd_swig.fcd_source_c_set_freq_corr(self, *args, **kwargs)

    def set_dc_corr(self, *args, **kwargs):
        """set_dc_corr(self, double _dci, double _dcq)"""
        return _fcd_swig.fcd_source_c_set_dc_corr(self, *args, **kwargs)

    def set_iq_corr(self, *args, **kwargs):
        """set_iq_corr(self, double _gain, double _phase)"""
        return _fcd_swig.fcd_source_c_set_iq_corr(self, *args, **kwargs)

    __swig_destroy__ = _fcd_swig.delete_fcd_source_c
    __del__ = lambda self : None;
fcd_source_c_swigregister = _fcd_swig.fcd_source_c_swigregister
fcd_source_c_swigregister(fcd_source_c)

class fcd_source_c_sptr(object):
    """Proxy of C++ boost::shared_ptr<(fcd_source_c)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> fcd_source_c_sptr
        __init__(self, fcd_source_c p) -> fcd_source_c_sptr
        """
        this = _fcd_swig.new_fcd_source_c_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self) -> fcd_source_c"""
        return _fcd_swig.fcd_source_c_sptr___deref__(self)

    __swig_destroy__ = _fcd_swig.delete_fcd_source_c_sptr
    __del__ = lambda self : None;
    def set_freq(self, *args):
        """
        set_freq(self, int freq)
        set_freq(self, float freq)
        """
        return _fcd_swig.fcd_source_c_sptr_set_freq(self, *args)

    def set_freq_khz(self, *args, **kwargs):
        """set_freq_khz(self, int freq)"""
        return _fcd_swig.fcd_source_c_sptr_set_freq_khz(self, *args, **kwargs)

    def set_lna_gain(self, *args, **kwargs):
        """set_lna_gain(self, float gain)"""
        return _fcd_swig.fcd_source_c_sptr_set_lna_gain(self, *args, **kwargs)

    def set_mixer_gain(self, *args, **kwargs):
        """set_mixer_gain(self, float gain)"""
        return _fcd_swig.fcd_source_c_sptr_set_mixer_gain(self, *args, **kwargs)

    def set_freq_corr(self, *args, **kwargs):
        """set_freq_corr(self, int ppm)"""
        return _fcd_swig.fcd_source_c_sptr_set_freq_corr(self, *args, **kwargs)

    def set_dc_corr(self, *args, **kwargs):
        """set_dc_corr(self, double _dci, double _dcq)"""
        return _fcd_swig.fcd_source_c_sptr_set_dc_corr(self, *args, **kwargs)

    def set_iq_corr(self, *args, **kwargs):
        """set_iq_corr(self, double _gain, double _phase)"""
        return _fcd_swig.fcd_source_c_sptr_set_iq_corr(self, *args, **kwargs)

    def primitive_connect(self, *args):
        """
        primitive_connect(self, gr_basic_block_sptr block)
        primitive_connect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _fcd_swig.fcd_source_c_sptr_primitive_connect(self, *args)

    def primitive_disconnect(self, *args):
        """
        primitive_disconnect(self, gr_basic_block_sptr block)
        primitive_disconnect(self, gr_basic_block_sptr src, int src_port, gr_basic_block_sptr dst, 
            int dst_port)
        """
        return _fcd_swig.fcd_source_c_sptr_primitive_disconnect(self, *args)

    def disconnect_all(self):
        """disconnect_all(self)"""
        return _fcd_swig.fcd_source_c_sptr_disconnect_all(self)

    def lock(self):
        """lock(self)"""
        return _fcd_swig.fcd_source_c_sptr_lock(self)

    def unlock(self):
        """unlock(self)"""
        return _fcd_swig.fcd_source_c_sptr_unlock(self)

    def to_hier_block2(self):
        """to_hier_block2(self) -> gr_hier_block2_sptr"""
        return _fcd_swig.fcd_source_c_sptr_to_hier_block2(self)

    def name(self):
        """name(self) -> string"""
        return _fcd_swig.fcd_source_c_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _fcd_swig.fcd_source_c_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _fcd_swig.fcd_source_c_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _fcd_swig.fcd_source_c_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _fcd_swig.fcd_source_c_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _fcd_swig.fcd_source_c_sptr_check_topology(self, *args, **kwargs)

fcd_source_c_sptr_swigregister = _fcd_swig.fcd_source_c_sptr_swigregister
fcd_source_c_sptr_swigregister(fcd_source_c_sptr)

fcd_source_c_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def source_c(device_name = ""):
  """source_c(string device_name = "") -> fcd_source_c_sptr"""
  return _fcd_swig.source_c(device_name)



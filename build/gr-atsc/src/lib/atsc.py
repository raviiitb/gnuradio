# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.4
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_atsc', [dirname(__file__)])
        except ImportError:
            import _atsc
            return _atsc
        if fp is not None:
            try:
                _mod = imp.load_module('_atsc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _atsc = swig_import_helper()
    del swig_import_helper
else:
    import _atsc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


class SwigPyIterator(object):
    """Proxy of C++ swig::SwigPyIterator class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _atsc.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(self) -> PyObject"""
        return _atsc.SwigPyIterator_value(self)

    def incr(self, n = 1):
        """incr(self, size_t n = 1) -> SwigPyIterator"""
        return _atsc.SwigPyIterator_incr(self, n)

    def decr(self, n = 1):
        """decr(self, size_t n = 1) -> SwigPyIterator"""
        return _atsc.SwigPyIterator_decr(self, n)

    def distance(self, *args, **kwargs):
        """distance(self, SwigPyIterator x) -> ptrdiff_t"""
        return _atsc.SwigPyIterator_distance(self, *args, **kwargs)

    def equal(self, *args, **kwargs):
        """equal(self, SwigPyIterator x) -> bool"""
        return _atsc.SwigPyIterator_equal(self, *args, **kwargs)

    def copy(self):
        """copy(self) -> SwigPyIterator"""
        return _atsc.SwigPyIterator_copy(self)

    def next(self):
        """next(self) -> PyObject"""
        return _atsc.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(self) -> PyObject"""
        return _atsc.SwigPyIterator___next__(self)

    def previous(self):
        """previous(self) -> PyObject"""
        return _atsc.SwigPyIterator_previous(self)

    def advance(self, *args, **kwargs):
        """advance(self, ptrdiff_t n) -> SwigPyIterator"""
        return _atsc.SwigPyIterator_advance(self, *args, **kwargs)

    def __eq__(self, *args, **kwargs):
        """__eq__(self, SwigPyIterator x) -> bool"""
        return _atsc.SwigPyIterator___eq__(self, *args, **kwargs)

    def __ne__(self, *args, **kwargs):
        """__ne__(self, SwigPyIterator x) -> bool"""
        return _atsc.SwigPyIterator___ne__(self, *args, **kwargs)

    def __iadd__(self, *args, **kwargs):
        """__iadd__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _atsc.SwigPyIterator___iadd__(self, *args, **kwargs)

    def __isub__(self, *args, **kwargs):
        """__isub__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _atsc.SwigPyIterator___isub__(self, *args, **kwargs)

    def __add__(self, *args, **kwargs):
        """__add__(self, ptrdiff_t n) -> SwigPyIterator"""
        return _atsc.SwigPyIterator___add__(self, *args, **kwargs)

    def __sub__(self, *args):
        """
        __sub__(self, ptrdiff_t n) -> SwigPyIterator
        __sub__(self, SwigPyIterator x) -> ptrdiff_t
        """
        return _atsc.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _atsc.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

sizeof_atsc_mpeg_packet = _atsc.sizeof_atsc_mpeg_packet
sizeof_atsc_mpeg_packet_no_sync = _atsc.sizeof_atsc_mpeg_packet_no_sync
sizeof_atsc_mpeg_packet_rs_encoded = _atsc.sizeof_atsc_mpeg_packet_rs_encoded
sizeof_atsc_data_segment = _atsc.sizeof_atsc_data_segment
sizeof_atsc_soft_data_segment = _atsc.sizeof_atsc_soft_data_segment
sizeof_atsc_mpeg_packet_pad = _atsc.sizeof_atsc_mpeg_packet_pad
sizeof_atsc_mpeg_packet_no_sync_pad = _atsc.sizeof_atsc_mpeg_packet_no_sync_pad
sizeof_atsc_mpeg_packet_rs_encoded_pad = _atsc.sizeof_atsc_mpeg_packet_rs_encoded_pad
sizeof_atsc_data_segment_pad = _atsc.sizeof_atsc_data_segment_pad
sizeof_atsc_soft_data_segment_pad = _atsc.sizeof_atsc_soft_data_segment_pad
class atsc_randomizer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_randomizer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_randomizer_sptr
        __init__(self,  p) -> atsc_randomizer_sptr
        """
        this = _atsc.new_atsc_randomizer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_randomizer_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_randomizer_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_randomizer_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_randomizer_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_randomizer_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_randomizer_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_randomizer_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_randomizer_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_randomizer_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_randomizer_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_randomizer_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_randomizer_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_randomizer_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_randomizer_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_randomizer_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_randomizer_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_randomizer_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_randomizer_sptr_check_topology(self, *args, **kwargs)

atsc_randomizer_sptr_swigregister = _atsc.atsc_randomizer_sptr_swigregister
atsc_randomizer_sptr_swigregister(atsc_randomizer_sptr)
cvar = _atsc.cvar
ATSC_SYMBOL_RATE = cvar.ATSC_SYMBOL_RATE
ATSC_DATA_SEGMENT_RATE = cvar.ATSC_DATA_SEGMENT_RATE
ATSC_MPEG_DATA_LENGTH = cvar.ATSC_MPEG_DATA_LENGTH
ATSC_MPEG_PKT_LENGTH = cvar.ATSC_MPEG_PKT_LENGTH
ATSC_MPEG_RS_ENCODED_LENGTH = cvar.ATSC_MPEG_RS_ENCODED_LENGTH
ATSC_DATA_SEGMENT_LENGTH = cvar.ATSC_DATA_SEGMENT_LENGTH
ATSC_DSEGS_PER_FIELD = cvar.ATSC_DSEGS_PER_FIELD
MPEG_SYNC_BYTE = cvar.MPEG_SYNC_BYTE
MPEG_TRANSPORT_ERROR_BIT = cvar.MPEG_TRANSPORT_ERROR_BIT

atsc_randomizer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def randomizer():
  """
    randomizer() -> atsc_randomizer_sptr

    "Whiten" incoming mpeg transport stream packets

    input: atsc_mpeg_packet; output: atsc_mpeg_packet_no_sync
    """
  return _atsc.randomizer()
class atsc_derandomizer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_derandomizer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_derandomizer_sptr
        __init__(self,  p) -> atsc_derandomizer_sptr
        """
        this = _atsc.new_atsc_derandomizer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_derandomizer_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_derandomizer_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_derandomizer_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_derandomizer_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_derandomizer_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_derandomizer_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_derandomizer_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_derandomizer_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_derandomizer_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_derandomizer_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_derandomizer_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_derandomizer_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_derandomizer_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_derandomizer_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_derandomizer_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_derandomizer_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_derandomizer_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_derandomizer_sptr_check_topology(self, *args, **kwargs)

atsc_derandomizer_sptr_swigregister = _atsc.atsc_derandomizer_sptr_swigregister
atsc_derandomizer_sptr_swigregister(atsc_derandomizer_sptr)

atsc_derandomizer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def derandomizer():
  """
    derandomizer() -> atsc_derandomizer_sptr

    "dewhiten" incoming mpeg transport stream packets

    input: atsc_mpeg_packet_no_sync; output: atsc_mpeg_packet;
    """
  return _atsc.derandomizer()
class atsc_rs_encoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_rs_encoder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_rs_encoder_sptr
        __init__(self,  p) -> atsc_rs_encoder_sptr
        """
        this = _atsc.new_atsc_rs_encoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_rs_encoder_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_rs_encoder_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_rs_encoder_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_rs_encoder_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_rs_encoder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_rs_encoder_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_rs_encoder_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_rs_encoder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_rs_encoder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_rs_encoder_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_rs_encoder_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_rs_encoder_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_rs_encoder_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_rs_encoder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_rs_encoder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_rs_encoder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_rs_encoder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_rs_encoder_sptr_check_topology(self, *args, **kwargs)

atsc_rs_encoder_sptr_swigregister = _atsc.atsc_rs_encoder_sptr_swigregister
atsc_rs_encoder_sptr_swigregister(atsc_rs_encoder_sptr)

atsc_rs_encoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def rs_encoder():
  """
    rs_encoder() -> atsc_rs_encoder_sptr

    Reed-Solomon encoder for ATSC

    input: atsc_mpeg_packet_no_sync; output: atsc_mpeg_packet_rs_encoded.
    """
  return _atsc.rs_encoder()
class atsc_rs_decoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_rs_decoder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_rs_decoder_sptr
        __init__(self,  p) -> atsc_rs_decoder_sptr
        """
        this = _atsc.new_atsc_rs_decoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_rs_decoder_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_rs_decoder_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_rs_decoder_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_rs_decoder_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_rs_decoder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_rs_decoder_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_rs_decoder_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_rs_decoder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_rs_decoder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_rs_decoder_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_rs_decoder_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_rs_decoder_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_rs_decoder_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_rs_decoder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_rs_decoder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_rs_decoder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_rs_decoder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_rs_decoder_sptr_check_topology(self, *args, **kwargs)

atsc_rs_decoder_sptr_swigregister = _atsc.atsc_rs_decoder_sptr_swigregister
atsc_rs_decoder_sptr_swigregister(atsc_rs_decoder_sptr)

atsc_rs_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def rs_decoder():
  """
    rs_decoder() -> atsc_rs_decoder_sptr

    Reed-Solomon decoder for ATSC

    input: atsc_mpeg_packet_rs_encoded; output: atsc_mpeg_packet_no_sync.
    """
  return _atsc.rs_decoder()
class atsc_interleaver_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_interleaver)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_interleaver_sptr
        __init__(self,  p) -> atsc_interleaver_sptr
        """
        this = _atsc.new_atsc_interleaver_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_interleaver_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_interleaver_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_interleaver_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_interleaver_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_interleaver_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_interleaver_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_interleaver_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_interleaver_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_interleaver_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_interleaver_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_interleaver_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_interleaver_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_interleaver_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_interleaver_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_interleaver_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_interleaver_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_interleaver_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_interleaver_sptr_check_topology(self, *args, **kwargs)

atsc_interleaver_sptr_swigregister = _atsc.atsc_interleaver_sptr_swigregister
atsc_interleaver_sptr_swigregister(atsc_interleaver_sptr)

atsc_interleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def interleaver():
  """
    interleaver() -> atsc_interleaver_sptr

    Interleave RS encoded ATSC data ( atsc_mpeg_packet_rs_encoded --> atsc_mpeg_packet_rs_encoded)*

    input: atsc_mpeg_packet_rs_encoded; output: atsc_mpeg_packet_rs_encoded.
    """
  return _atsc.interleaver()
class atsc_deinterleaver_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_deinterleaver)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_deinterleaver_sptr
        __init__(self,  p) -> atsc_deinterleaver_sptr
        """
        this = _atsc.new_atsc_deinterleaver_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_deinterleaver_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_deinterleaver_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_deinterleaver_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_deinterleaver_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_deinterleaver_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_deinterleaver_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_deinterleaver_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_deinterleaver_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_deinterleaver_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_deinterleaver_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_deinterleaver_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_deinterleaver_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_deinterleaver_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_deinterleaver_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_deinterleaver_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_deinterleaver_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_deinterleaver_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_deinterleaver_sptr_check_topology(self, *args, **kwargs)

atsc_deinterleaver_sptr_swigregister = _atsc.atsc_deinterleaver_sptr_swigregister
atsc_deinterleaver_sptr_swigregister(atsc_deinterleaver_sptr)

atsc_deinterleaver_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def deinterleaver():
  """
    deinterleaver() -> atsc_deinterleaver_sptr

    Deinterleave RS encoded ATSC data ( atsc_mpeg_packet_rs_encoded --> atsc_mpeg_packet_rs_encoded)

    input: atsc_mpeg_packet_rs_encoded; output: atsc_mpeg_packet_rs_encoded.
    """
  return _atsc.deinterleaver()
class atsc_trellis_encoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_trellis_encoder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_trellis_encoder_sptr
        __init__(self,  p) -> atsc_trellis_encoder_sptr
        """
        this = _atsc.new_atsc_trellis_encoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_trellis_encoder_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_trellis_encoder_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_trellis_encoder_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_trellis_encoder_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_trellis_encoder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_trellis_encoder_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_trellis_encoder_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_trellis_encoder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_trellis_encoder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_trellis_encoder_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_trellis_encoder_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_trellis_encoder_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_trellis_encoder_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_trellis_encoder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_trellis_encoder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_trellis_encoder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_trellis_encoder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_trellis_encoder_sptr_check_topology(self, *args, **kwargs)

atsc_trellis_encoder_sptr_swigregister = _atsc.atsc_trellis_encoder_sptr_swigregister
atsc_trellis_encoder_sptr_swigregister(atsc_trellis_encoder_sptr)

atsc_trellis_encoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def trellis_encoder():
  """
    trellis_encoder() -> atsc_trellis_encoder_sptr

    ATSC 12-way interleaved trellis encoder (atsc_mpeg_packet_rs_encoded --> atsc_data_segment)

    input: atsc_mpeg_packet_rs_encoded; output: atsc_data_segment.
    """
  return _atsc.trellis_encoder()
class atsc_viterbi_decoder_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_viterbi_decoder)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_viterbi_decoder_sptr
        __init__(self,  p) -> atsc_viterbi_decoder_sptr
        """
        this = _atsc.new_atsc_viterbi_decoder_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_viterbi_decoder_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_viterbi_decoder_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_viterbi_decoder_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_viterbi_decoder_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_viterbi_decoder_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_viterbi_decoder_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_viterbi_decoder_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_viterbi_decoder_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_viterbi_decoder_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_viterbi_decoder_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_viterbi_decoder_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_viterbi_decoder_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_viterbi_decoder_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_viterbi_decoder_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_viterbi_decoder_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_viterbi_decoder_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_viterbi_decoder_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_viterbi_decoder_sptr_check_topology(self, *args, **kwargs)

atsc_viterbi_decoder_sptr_swigregister = _atsc.atsc_viterbi_decoder_sptr_swigregister
atsc_viterbi_decoder_sptr_swigregister(atsc_viterbi_decoder_sptr)

atsc_viterbi_decoder_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def viterbi_decoder():
  """
    viterbi_decoder() -> atsc_viterbi_decoder_sptr

    ATSC 12-way interleaved viterbi decoder (atsc_soft_data_segment --> atsc_mpeg_packet_rs_encoded)

    input: atsc_soft_data_segment; output: atsc_mpeg_packet_rs_encoded.
    """
  return _atsc.viterbi_decoder()
class atsc_ds_to_softds_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_ds_to_softds)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_ds_to_softds_sptr
        __init__(self,  p) -> atsc_ds_to_softds_sptr
        """
        this = _atsc.new_atsc_ds_to_softds_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_ds_to_softds_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_ds_to_softds_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_ds_to_softds_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_ds_to_softds_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_ds_to_softds_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_ds_to_softds_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_ds_to_softds_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_ds_to_softds_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_ds_to_softds_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_ds_to_softds_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_ds_to_softds_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_ds_to_softds_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_ds_to_softds_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_ds_to_softds_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_ds_to_softds_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_ds_to_softds_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_ds_to_softds_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_ds_to_softds_sptr_check_topology(self, *args, **kwargs)

atsc_ds_to_softds_sptr_swigregister = _atsc.atsc_ds_to_softds_sptr_swigregister
atsc_ds_to_softds_sptr_swigregister(atsc_ds_to_softds_sptr)

atsc_ds_to_softds_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def ds_to_softds():
  """
    ds_to_softds() -> atsc_ds_to_softds_sptr

    Debug glue routine (atsc_data_segment --> atsc_soft_data_segment)

    input: atsc_data_segment; output: atsc_soft_data_segment.
    """
  return _atsc.ds_to_softds()
class atsc_field_sync_mux_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_field_sync_mux)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_field_sync_mux_sptr
        __init__(self,  p) -> atsc_field_sync_mux_sptr
        """
        this = _atsc.new_atsc_field_sync_mux_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_field_sync_mux_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_field_sync_mux_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_field_sync_mux_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_field_sync_mux_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_field_sync_mux_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_field_sync_mux_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_field_sync_mux_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_field_sync_mux_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_field_sync_mux_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_field_sync_mux_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_field_sync_mux_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_field_sync_mux_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_field_sync_mux_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_field_sync_mux_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_field_sync_mux_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_field_sync_mux_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_field_sync_mux_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_field_sync_mux_sptr_check_topology(self, *args, **kwargs)

atsc_field_sync_mux_sptr_swigregister = _atsc.atsc_field_sync_mux_sptr_swigregister
atsc_field_sync_mux_sptr_swigregister(atsc_field_sync_mux_sptr)

atsc_field_sync_mux_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def field_sync_mux():
  """
    field_sync_mux() -> atsc_field_sync_mux_sptr

    Insert ATSC Field Syncs as required (atsc_data_segment --> atsc_data_segment)

    input: atsc_data_segment; output: atsc_data_segment.
    """
  return _atsc.field_sync_mux()
class atsc_field_sync_demux_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_field_sync_demux)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_field_sync_demux_sptr
        __init__(self,  p) -> atsc_field_sync_demux_sptr
        """
        this = _atsc.new_atsc_field_sync_demux_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_field_sync_demux_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_field_sync_demux_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_field_sync_demux_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_field_sync_demux_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_field_sync_demux_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_field_sync_demux_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_field_sync_demux_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_field_sync_demux_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_field_sync_demux_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_field_sync_demux_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_field_sync_demux_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_field_sync_demux_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_field_sync_demux_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_field_sync_demux_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_field_sync_demux_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_field_sync_demux_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_field_sync_demux_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_field_sync_demux_sptr_check_topology(self, *args, **kwargs)

atsc_field_sync_demux_sptr_swigregister = _atsc.atsc_field_sync_demux_sptr_swigregister
atsc_field_sync_demux_sptr_swigregister(atsc_field_sync_demux_sptr)

atsc_field_sync_demux_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def field_sync_demux():
  """
    field_sync_demux() -> atsc_field_sync_demux_sptr

    ATSC Field Sync Demux.

    This class accepts 1 stream of floats (data), and 1 stream of tags (syminfo). * It outputs one stream of atsc_soft_data_segment packets
    """
  return _atsc.field_sync_demux()
class atsc_equalizer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_equalizer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_equalizer_sptr
        __init__(self,  p) -> atsc_equalizer_sptr
        """
        this = _atsc.new_atsc_equalizer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_equalizer_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_equalizer_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_equalizer_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_equalizer_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_equalizer_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_equalizer_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_equalizer_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_equalizer_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_equalizer_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_equalizer_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_equalizer_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_equalizer_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_equalizer_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_equalizer_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_equalizer_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_equalizer_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_equalizer_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_equalizer_sptr_check_topology(self, *args, **kwargs)

atsc_equalizer_sptr_swigregister = _atsc.atsc_equalizer_sptr_swigregister
atsc_equalizer_sptr_swigregister(atsc_equalizer_sptr)

atsc_equalizer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def equalizer():
  """
    equalizer() -> atsc_equalizer_sptr

    ATSC equalizer (float,syminfo --> float,syminfo)

    first inputs are data samples, second inputs are tags. first outputs are equalized data samples, second outputs are tags.
    """
  return _atsc.equalizer()
class atsc_fs_checker_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_fs_checker)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_fs_checker_sptr
        __init__(self,  p) -> atsc_fs_checker_sptr
        """
        this = _atsc.new_atsc_fs_checker_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_fs_checker_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_fs_checker_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_fs_checker_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_fs_checker_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_fs_checker_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_fs_checker_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_fs_checker_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_fs_checker_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_fs_checker_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_fs_checker_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_fs_checker_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_fs_checker_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_fs_checker_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_fs_checker_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_fs_checker_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_fs_checker_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_fs_checker_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_fs_checker_sptr_check_topology(self, *args, **kwargs)

atsc_fs_checker_sptr_swigregister = _atsc.atsc_fs_checker_sptr_swigregister
atsc_fs_checker_sptr_swigregister(atsc_fs_checker_sptr)

atsc_fs_checker_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fs_checker():
  """
    fs_checker() -> atsc_fs_checker_sptr

    ATSC field sync checker (float,syminfo --> float,syminfo)

    first output is delayed version of input. second output is set of tags, one-for-one with first output.
    """
  return _atsc.fs_checker()
class atsc_bit_timing_loop_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_bit_timing_loop)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_bit_timing_loop_sptr
        __init__(self,  p) -> atsc_bit_timing_loop_sptr
        """
        this = _atsc.new_atsc_bit_timing_loop_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_bit_timing_loop_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_bit_timing_loop_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_bit_timing_loop_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_bit_timing_loop_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_bit_timing_loop_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_bit_timing_loop_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_bit_timing_loop_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_bit_timing_loop_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_bit_timing_loop_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_bit_timing_loop_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_bit_timing_loop_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_bit_timing_loop_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_bit_timing_loop_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_bit_timing_loop_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_bit_timing_loop_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_bit_timing_loop_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_bit_timing_loop_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_bit_timing_loop_sptr_check_topology(self, *args, **kwargs)

atsc_bit_timing_loop_sptr_swigregister = _atsc.atsc_bit_timing_loop_sptr_swigregister
atsc_bit_timing_loop_sptr_swigregister(atsc_bit_timing_loop_sptr)

atsc_bit_timing_loop_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def bit_timing_loop():
  """
    bit_timing_loop() -> atsc_bit_timing_loop_sptr

    ATSC BitTimingLoop3

    This class accepts a single real input and produces two outputs, the raw symbol (float) and the tag (atsc_syminfo)
    """
  return _atsc.bit_timing_loop()
class atsc_fpll_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_fpll)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_fpll_sptr
        __init__(self,  p) -> atsc_fpll_sptr
        """
        this = _atsc.new_atsc_fpll_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_fpll_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_fpll_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_fpll_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_fpll_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_fpll_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_fpll_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_fpll_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_fpll_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_fpll_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_fpll_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_fpll_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_fpll_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_fpll_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_fpll_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_fpll_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_fpll_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_fpll_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_fpll_sptr_check_topology(self, *args, **kwargs)

atsc_fpll_sptr_swigregister = _atsc.atsc_fpll_sptr_swigregister
atsc_fpll_sptr_swigregister(atsc_fpll_sptr)

atsc_fpll_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def fpll():
  """
    fpll() -> atsc_fpll_sptr

    ATSC FPLL (2nd Version)

    A/D --> GrFIRfilterFFF ----> GrAtscFPLL ---->

    We use GrFIRfilterFFF to bandpass filter the signal of interest.

    This class accepts a single real input and produces a single real output
    """
  return _atsc.fpll()
class atsc_depad_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_depad)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_depad_sptr
        __init__(self,  p) -> atsc_depad_sptr
        """
        this = _atsc.new_atsc_depad_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_depad_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_depad_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_depad_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_depad_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_depad_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_depad_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_depad_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_depad_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_depad_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_depad_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_depad_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_depad_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_depad_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_depad_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_depad_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_depad_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_depad_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_depad_sptr_check_topology(self, *args, **kwargs)

atsc_depad_sptr_swigregister = _atsc.atsc_depad_sptr_swigregister
atsc_depad_sptr_swigregister(atsc_depad_sptr)

atsc_depad_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def depad():
  """
    depad() -> atsc_depad_sptr

    depad mpeg ts packets from 256 byte atsc_mpeg_packet to 188 byte char

    input: atsc_mpeg_packet; output: unsigned char
    """
  return _atsc.depad()
class atsc_pad_sptr(object):
    """Proxy of C++ boost::shared_ptr<(atsc_pad)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(self) -> atsc_pad_sptr
        __init__(self,  p) -> atsc_pad_sptr
        """
        this = _atsc.new_atsc_pad_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(self)"""
        return _atsc.atsc_pad_sptr___deref__(self)

    __swig_destroy__ = _atsc.delete_atsc_pad_sptr
    __del__ = lambda self : None;
    def reset(self):
        """reset(self)"""
        return _atsc.atsc_pad_sptr_reset(self)

    def history(self):
        """history(self) -> unsigned int"""
        return _atsc.atsc_pad_sptr_history(self)

    def output_multiple(self):
        """output_multiple(self) -> int"""
        return _atsc.atsc_pad_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(self) -> double"""
        return _atsc.atsc_pad_sptr_relative_rate(self)

    def start(self):
        """start(self) -> bool"""
        return _atsc.atsc_pad_sptr_start(self)

    def stop(self):
        """stop(self) -> bool"""
        return _atsc.atsc_pad_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(self, unsigned int which_input) -> uint64_t"""
        return _atsc.atsc_pad_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(self, unsigned int which_output) -> uint64_t"""
        return _atsc.atsc_pad_sptr_nitems_written(self, *args, **kwargs)

    def detail(self):
        """detail(self) -> gr_block_detail_sptr"""
        return _atsc.atsc_pad_sptr_detail(self)

    def set_detail(self, *args, **kwargs):
        """set_detail(self, gr_block_detail_sptr detail)"""
        return _atsc.atsc_pad_sptr_set_detail(self, *args, **kwargs)

    def name(self):
        """name(self) -> string"""
        return _atsc.atsc_pad_sptr_name(self)

    def input_signature(self):
        """input_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_pad_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(self) -> gr_io_signature_sptr"""
        return _atsc.atsc_pad_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(self) -> long"""
        return _atsc.atsc_pad_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(self) -> gr_basic_block_sptr"""
        return _atsc.atsc_pad_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(self, int ninputs, int noutputs) -> bool"""
        return _atsc.atsc_pad_sptr_check_topology(self, *args, **kwargs)

atsc_pad_sptr_swigregister = _atsc.atsc_pad_sptr_swigregister
atsc_pad_sptr_swigregister(atsc_pad_sptr)

atsc_pad_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id ())


def pad():
  """
    pad() -> atsc_pad_sptr

    pad mpeg ts packets from 188 byte char to to 256 byte atsc_mpeg_packet

    input: unsigned char; output: atsc_mpeg_packet
    """
  return _atsc.pad()



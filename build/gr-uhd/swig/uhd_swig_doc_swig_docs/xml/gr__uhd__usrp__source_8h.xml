<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="gr__uhd__usrp__source_8h" kind="file">
    <compoundname>gr_uhd_usrp_source.h</compoundname>
    <includes refid="gr__uhd__api_8h" local="no">gr_uhd_api.h</includes>
    <includes local="no">gr_sync_block.h</includes>
    <includes local="no">uhd/usrp/multi_usrp.hpp</includes>
    <incdepgraph>
      <node id="21">
        <label>gr_sync_block.h</label>
      </node>
      <node id="20">
        <label>uhd/config.hpp</label>
      </node>
      <node id="19">
        <label>gr_uhd_api.h</label>
        <link refid="gr__uhd__api_8h"/>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="22">
        <label>uhd/usrp/multi_usrp.hpp</label>
      </node>
      <node id="18">
        <label>/home/alexzh/gr_alex/gnuradio/gr-uhd/include/gr_uhd_usrp_source.h</label>
        <link refid="gr_uhd_usrp_source.h"/>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structuhd_1_1stream__args__t" prot="public">uhd::stream_args_t</innerclass>
    <innerclass refid="classuhd__usrp__source" prot="public">uhd_usrp_source</innerclass>
    <innernamespace refid="namespaceuhd">uhd</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gr__uhd__usrp__source_8h_1a7f8bfc83ec7e75ae71bfc3f95aec6dda" prot="public" static="no">
        <name>INCLUDED_UHD_STREAM_HPP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-uhd/include/gr_uhd_usrp_source.h" line="45" bodyfile="/home/alexzh/gr_alex/gnuradio/gr-uhd/include/gr_uhd_usrp_source.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gr__uhd__usrp__source_8h_1a2f347ec7a83c9eafbb2fd742a61a7b18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UHD_IMPORT boost::shared_ptr&lt; <ref refid="classuhd__usrp__source" kindref="compound">uhd_usrp_source</ref> &gt;</type>
        <definition>UHD_IMPORT boost::shared_ptr&lt;uhd_usrp_source&gt; uhd_make_usrp_source</definition>
        <argsstring>(const uhd::device_addr_t &amp;device_addr, const uhd::io_type_t &amp;io_type, size_t num_channels)</argsstring>
        <name>uhd_make_usrp_source</name>
        <param>
          <type>const uhd::device_addr_t &amp;</type>
          <declname>device_addr</declname>
        </param>
        <param>
          <type>const uhd::io_type_t &amp;</type>
          <declname>io_type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_channels</declname>
        </param>
        <briefdescription>
<para>Make a new USRP source block.</para><para>The USRP source block receives samples and writes to a stream. The source block also provides API calls for receiver settings. </para>        </briefdescription>
        <detaileddescription>
<para>RX Stream tagging:</para><para>The following tag keys will be produced by the work function:<itemizedlist>
<listitem><para>pmt::pmt_string_to_symbol(&quot;rx_time&quot;)</para></listitem></itemizedlist>
</para><para>The timstamp tag value is a pmt tuple of the following: (uint64 seconds, and double fractional seconds). A timestamp tag is produced at start() and after overflows.</para><para>See the UHD manual for more detailed documentation: <ulink url="http://code.ettus.com/redmine/ettus/projects/uhd/wiki">http://code.ettus.com/redmine/ettus/projects/uhd/wiki</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>the address to identify the hardware </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>io_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired output data type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_channels</parametername>
</parameternamelist>
<parameterdescription>
<para>number of stream from the device </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new USRP source block object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-uhd/include/gr_uhd_usrp_source.h" line="80"/>
      </memberdef>
      <memberdef kind="function" id="gr__uhd__usrp__source_8h_1ac28dc420ee12760b617bb9b31c3e22d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UHD_IMPORT boost::shared_ptr&lt; <ref refid="classuhd__usrp__source" kindref="compound">uhd_usrp_source</ref> &gt;</type>
        <definition>UHD_IMPORT boost::shared_ptr&lt;uhd_usrp_source&gt; uhd_make_usrp_source</definition>
        <argsstring>(const uhd::device_addr_t &amp;device_addr, const uhd::stream_args_t &amp;stream_args)</argsstring>
        <name>uhd_make_usrp_source</name>
        <param>
          <type>const uhd::device_addr_t &amp;</type>
          <declname>device_addr</declname>
        </param>
        <param>
          <type>const <ref refid="structuhd_1_1stream__args__t" kindref="compound">uhd::stream_args_t</ref> &amp;</type>
          <declname>stream_args</declname>
        </param>
        <briefdescription>
<para>Make a new USRP source block. </para>        </briefdescription>
        <detaileddescription>
<para>The USRP source block receives samples and writes to a stream. The source block also provides API calls for receiver settings.</para><para>RX Stream tagging:</para><para>The following tag keys will be produced by the work function:<itemizedlist>
<listitem><para>pmt::pmt_string_to_symbol(&quot;rx_time&quot;)</para></listitem></itemizedlist>
</para><para>The timstamp tag value is a pmt tuple of the following: (uint64 seconds, and double fractional seconds). A timestamp tag is produced at start() and after overflows.</para><para>See the UHD manual for more detailed documentation: <ulink url="http://code.ettus.com/redmine/ettus/projects/uhd/wiki">http://code.ettus.com/redmine/ettus/projects/uhd/wiki</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>the address to identify the hardware </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream_args</parametername>
</parameternamelist>
<parameterdescription>
<para>the IO format and channel specification </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new USRP source block object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-uhd/include/gr_uhd_usrp_source.h" line="107"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2010-2012<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>GNU<sp/>Radio</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>GNU<sp/>Radio<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>3,<sp/>or<sp/>(at<sp/>your<sp/>option)</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>GNU<sp/>Radio<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>GNU<sp/>Radio;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/><sp/>If<sp/>not,<sp/>write<sp/>to</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Boston,<sp/>MA<sp/>02110-1301,<sp/>USA.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDED_GR_UHD_USRP_SOURCE_H</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_GR_UHD_USRP_SOURCE_H</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gr__uhd__api_8h" kindref="compound">gr_uhd_api.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gr_sync_block.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uhd/usrp/multi_usrp.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDED_UHD_STREAM_HPP</highlight></codeline>
<codeline lineno="30"><highlight class="preprocessor"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">uhd{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="gr__uhd__api_8h_1af9aa018424cf030907c7f8c5a48f4771" kindref="member">GR_UHD_API</ref><sp/>stream_args_t{</highlight></codeline>
<codeline lineno="32" refid="structuhd_1_1stream__args__t_1aa54b7dc3e2c71d11c774d8b4a15984cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structuhd_1_1stream__args__t" kindref="compound">stream_args_t</ref>(</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;cpu<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;otw<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu_format<sp/>=<sp/>cpu;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otw_format<sp/>=<sp/>otw;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>cpu_format;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>otw_format;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device_addr_t<sp/>args;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/>channels;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45" refid="gr__uhd__usrp__source_8h_1a7f8bfc83ec7e75ae71bfc3f95aec6dda" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>INCLUDED_UHD_STREAM_HPP</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>GR_UHD_USE_STREAM_API</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classuhd__usrp__source" kindref="compound">uhd_usrp_source</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="gr__uhd__api_8h_1af9aa018424cf030907c7f8c5a48f4771" kindref="member">GR_UHD_API</ref><sp/>boost::shared_ptr&lt;uhd_usrp_source&gt;<sp/><ref refid="gr__uhd__usrp__source_8h_1a2f347ec7a83c9eafbb2fd742a61a7b18" kindref="member" tooltip="Make a new USRP source block.The USRP source block receives samples and writes to a stream...">uhd_make_usrp_source</ref>(</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::device_addr_t<sp/>&amp;device_addr,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::io_type_t<sp/>&amp;io_type,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_channels</highlight></codeline>
<codeline lineno="80"><highlight class="normal">);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><ref refid="gr__uhd__api_8h_1af9aa018424cf030907c7f8c5a48f4771" kindref="member">GR_UHD_API</ref><sp/>boost::shared_ptr&lt;uhd_usrp_source&gt;<sp/><ref refid="gr__uhd__usrp__source_8h_1a2f347ec7a83c9eafbb2fd742a61a7b18" kindref="member" tooltip="Make a new USRP source block.The USRP source block receives samples and writes to a stream...">uhd_make_usrp_source</ref>(</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::device_addr_t<sp/>&amp;device_addr,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structuhd_1_1stream__args__t" kindref="compound">uhd::stream_args_t</ref><sp/>&amp;stream_args</highlight></codeline>
<codeline lineno="107"><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="classuhd__usrp__source" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="gr__uhd__api_8h_1af9aa018424cf030907c7f8c5a48f4771" kindref="member">GR_UHD_API</ref><sp/><ref refid="classuhd__usrp__source" kindref="compound">uhd_usrp_source</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>gr_sync_block{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_start_time(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::time_spec_t<sp/>&amp;time)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::dict&lt;std::string,<sp/>std::string&gt;<sp/>get_usrp_info(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_subdev_spec(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;spec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>get_subdev_spec(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_samp_rate(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rate)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_samp_rate(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::meta_range_t<sp/>get_samp_rates(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::tune_result_t<sp/>set_center_freq(</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::tune_request_t<sp/>tune_request,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="185" refid="classuhd__usrp__source_1a27dadf4bce182639ac6852221a7b6aed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uhd::tune_result_t<sp/><ref refid="classuhd__usrp__source_1a27dadf4bce182639ac6852221a7b6aed" kindref="member">set_center_freq</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0){</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_center_freq(uhd::tune_request_t(freq),<sp/>chan);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_center_freq(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::freq_range_t<sp/>get_freq_range(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_gain(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gain,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_gain(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gain,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_gain(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_gain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>get_gain_names(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::gain_range_t<sp/>get_gain_range(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::gain_range_t<sp/>get_gain_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_antenna(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ant,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>get_antenna(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>get_antennas(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_bandwidth(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bandwidth,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_auto_dc_offset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>enb,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_dc_offset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>&amp;offset,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_iq_balance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>&amp;correction,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::sensor_value_t<sp/>get_sensor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>get_sensor_names(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="classuhd__usrp__source_1ac84c9665063d4280ba17617d023dd7eb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uhd::sensor_value_t<sp/><ref refid="classuhd__usrp__source_1ac84c9665063d4280ba17617d023dd7eb" kindref="member" tooltip="DEPRECATED use get_sensor.">get_dboard_sensor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0){</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;get_sensor(name,<sp/>chan);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="classuhd__usrp__source_1aee82d2a48723a644642ffbb375e40d84" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classuhd__usrp__source_1aee82d2a48723a644642ffbb375e40d84" kindref="member" tooltip="DEPRECATED use get_sensor_names.">get_dboard_sensor_names</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0){</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;get_sensor_names(chan);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::sensor_value_t<sp/>get_mboard_sensor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>get_mboard_sensor_names(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_clock_config(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::clock_config_t<sp/>&amp;clock_config,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_time_source(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;source,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>get_time_source(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>get_time_sources(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_clock_source(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;source,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>get_clock_source(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>get_clock_sources(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_clock_rate(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_clock_rate(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rate,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::time_spec_t<sp/>get_time_now(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::time_spec_t<sp/>get_time_last_pps(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_time_now(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::time_spec_t<sp/>&amp;time_spec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_time_next_pps(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::time_spec_t<sp/>&amp;time_spec)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_time_unknown_pps(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::time_spec_t<sp/>&amp;time_spec)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_command_time(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::time_spec_t<sp/>&amp;time_spec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_command_time(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::usrp::dboard_iface::sptr<sp/>get_dboard_iface(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::usrp::multi_usrp::sptr<sp/>get_device(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_user_register(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::complex&lt;float&gt;<sp/>&gt;<sp/>finite_acquisition(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsamps)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::vector&lt;std::complex&lt;float&gt;<sp/>&gt;<sp/>&gt;<sp/>finite_acquisition_v(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nsamps)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="517"><highlight class="normal">};</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDED_GR_UHD_USRP_SOURCE_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/alexzh/gr_alex/gnuradio/gr-uhd/include/gr_uhd_usrp_source.h"/>
  </compounddef>
</doxygen>

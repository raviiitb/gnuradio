<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="gr__uhd__usrp__sink_8h" kind="file">
    <compoundname>gr_uhd_usrp_sink.h</compoundname>
    <includes refid="gr__uhd__api_8h" local="no">gr_uhd_api.h</includes>
    <includes local="no">gr_sync_block.h</includes>
    <includes local="no">uhd/usrp/multi_usrp.hpp</includes>
    <incdepgraph>
      <node id="15">
        <label>gr_sync_block.h</label>
      </node>
      <node id="12">
        <label>/home/alexzh/gr_alex/gnuradio/gr-uhd/include/gr_uhd_usrp_sink.h</label>
        <link refid="gr_uhd_usrp_sink.h"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>uhd/config.hpp</label>
      </node>
      <node id="13">
        <label>gr_uhd_api.h</label>
        <link refid="gr__uhd__api_8h"/>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>uhd/usrp/multi_usrp.hpp</label>
      </node>
    </incdepgraph>
    <innerclass refid="structuhd_1_1stream__args__t" prot="public">uhd::stream_args_t</innerclass>
    <innerclass refid="classuhd__usrp__sink" prot="public">uhd_usrp_sink</innerclass>
    <innernamespace refid="namespaceuhd">uhd</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="gr__uhd__usrp__sink_8h_1a7f8bfc83ec7e75ae71bfc3f95aec6dda" prot="public" static="no">
        <name>INCLUDED_UHD_STREAM_HPP</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-uhd/include/gr_uhd_usrp_sink.h" line="45" bodyfile="/home/alexzh/gr_alex/gnuradio/gr-uhd/include/gr_uhd_usrp_sink.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="gr__uhd__usrp__sink_8h_1a06a9e4bc3c337ab6a56fcc6dd1b03cb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UHD_IMPORT boost::shared_ptr&lt; <ref refid="classuhd__usrp__sink" kindref="compound">uhd_usrp_sink</ref> &gt;</type>
        <definition>UHD_IMPORT boost::shared_ptr&lt;uhd_usrp_sink&gt; uhd_make_usrp_sink</definition>
        <argsstring>(const uhd::device_addr_t &amp;device_addr, const uhd::io_type_t &amp;io_type, size_t num_channels)</argsstring>
        <name>uhd_make_usrp_sink</name>
        <param>
          <type>const uhd::device_addr_t &amp;</type>
          <declname>device_addr</declname>
        </param>
        <param>
          <type>const uhd::io_type_t &amp;</type>
          <declname>io_type</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>num_channels</declname>
        </param>
        <briefdescription>
<para>Make a new USRP sink block.</para><para>The USRP sink block reads a stream and transmits the samples. The sink block also provides API calls for transmitter settings. </para>        </briefdescription>
        <detaileddescription>
<para>TX Stream tagging:</para><para>The following tag keys will be consumed by the work function:<itemizedlist>
<listitem><para>pmt::pmt_string_to_symbol(&quot;tx_sob&quot;)</para></listitem><listitem><para>pmt::pmt_string_to_symbol(&quot;tx_eob&quot;)</para></listitem><listitem><para>pmt::pmt_string_to_symbol(&quot;tx_time&quot;)</para></listitem></itemizedlist>
</para><para>The sob and eob (start and end of burst) tag values are pmt booleans. When present, burst tags should be set to true (pmt::PMT_T).</para><para>The timstamp tag value is a pmt tuple of the following: (uint64 seconds, and double fractional seconds).</para><para>See the UHD manual for more detailed documentation: <ulink url="http://code.ettus.com/redmine/ettus/projects/uhd/wiki">http://code.ettus.com/redmine/ettus/projects/uhd/wiki</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>the address to identify the hardware </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>io_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the desired input data type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_channels</parametername>
</parameternamelist>
<parameterdescription>
<para>number of stream from the device </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new USRP sink block object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-uhd/include/gr_uhd_usrp_sink.h" line="84"/>
      </memberdef>
      <memberdef kind="function" id="gr__uhd__usrp__sink_8h_1acaceaef2a2e0d2d124c68e89c6955667" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UHD_IMPORT boost::shared_ptr&lt; <ref refid="classuhd__usrp__sink" kindref="compound">uhd_usrp_sink</ref> &gt;</type>
        <definition>UHD_IMPORT boost::shared_ptr&lt;uhd_usrp_sink&gt; uhd_make_usrp_sink</definition>
        <argsstring>(const uhd::device_addr_t &amp;device_addr, const uhd::stream_args_t &amp;stream_args)</argsstring>
        <name>uhd_make_usrp_sink</name>
        <param>
          <type>const uhd::device_addr_t &amp;</type>
          <declname>device_addr</declname>
        </param>
        <param>
          <type>const <ref refid="structuhd_1_1stream__args__t" kindref="compound">uhd::stream_args_t</ref> &amp;</type>
          <declname>stream_args</declname>
        </param>
        <briefdescription>
<para>Make a new USRP sink block. </para>        </briefdescription>
        <detaileddescription>
<para>The USRP sink block reads a stream and transmits the samples. The sink block also provides API calls for transmitter settings.</para><para>TX Stream tagging:</para><para>The following tag keys will be consumed by the work function:<itemizedlist>
<listitem><para>pmt::pmt_string_to_symbol(&quot;tx_sob&quot;)</para></listitem><listitem><para>pmt::pmt_string_to_symbol(&quot;tx_eob&quot;)</para></listitem><listitem><para>pmt::pmt_string_to_symbol(&quot;tx_time&quot;)</para></listitem></itemizedlist>
</para><para>The sob and eob (start and end of burst) tag values are pmt booleans. When present, burst tags should be set to true (pmt::PMT_T).</para><para>The timstamp tag value is a pmt tuple of the following: (uint64 seconds, and double fractional seconds).</para><para>See the UHD manual for more detailed documentation: <ulink url="http://code.ettus.com/redmine/ettus/projects/uhd/wiki">http://code.ettus.com/redmine/ettus/projects/uhd/wiki</ulink></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>device_addr</parametername>
</parameternamelist>
<parameterdescription>
<para>the address to identify the hardware </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stream_args</parametername>
</parameternamelist>
<parameterdescription>
<para>the IO format and channel specification </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new USRP sink block object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-uhd/include/gr_uhd_usrp_sink.h" line="115"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2010-2012<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>GNU<sp/>Radio</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>GNU<sp/>Radio<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>3,<sp/>or<sp/>(at<sp/>your<sp/>option)</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*<sp/>GNU<sp/>Radio<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>GNU<sp/>Radio;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/><sp/>If<sp/>not,<sp/>write<sp/>to</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>Boston,<sp/>MA<sp/>02110-1301,<sp/>USA.</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDED_GR_UHD_USRP_SINK_H</highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_GR_UHD_USRP_SINK_H</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="gr__uhd__api_8h" kindref="compound">gr_uhd_api.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;gr_sync_block.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;uhd/usrp/multi_usrp.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDED_UHD_STREAM_HPP</highlight></codeline>
<codeline lineno="30" refid="namespaceuhd" refkind="compound"><highlight class="preprocessor"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">uhd{</highlight></codeline>
<codeline lineno="31" refid="structuhd_1_1stream__args__t" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="gr__uhd__api_8h_1af9aa018424cf030907c7f8c5a48f4771" kindref="member">GR_UHD_API</ref><sp/><ref refid="structuhd_1_1stream__args__t" kindref="compound">stream_args_t</ref>{</highlight></codeline>
<codeline lineno="32" refid="structuhd_1_1stream__args__t_1aa54b7dc3e2c71d11c774d8b4a15984cc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structuhd_1_1stream__args__t" kindref="compound">stream_args_t</ref>(</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;cpu<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;otw<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cpu_format<sp/>=<sp/>cpu;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>otw_format<sp/>=<sp/>otw;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39" refid="structuhd_1_1stream__args__t_1a602a64b4937a85dba84e7f724387e252" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="structuhd_1_1stream__args__t_1a602a64b4937a85dba84e7f724387e252" kindref="member">cpu_format</ref>;</highlight></codeline>
<codeline lineno="40" refid="structuhd_1_1stream__args__t_1a0ba0e946d2f83f7ac085f4f4e2ce9578" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/><ref refid="structuhd_1_1stream__args__t_1a0ba0e946d2f83f7ac085f4f4e2ce9578" kindref="member">otw_format</ref>;</highlight></codeline>
<codeline lineno="41" refid="structuhd_1_1stream__args__t_1a4463f2eec2cc7ee70f84baacbb26e1ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>device_addr_t<sp/><ref refid="structuhd_1_1stream__args__t_1a4463f2eec2cc7ee70f84baacbb26e1ef" kindref="member">args</ref>;</highlight></codeline>
<codeline lineno="42" refid="structuhd_1_1stream__args__t_1a82f6c25a968b1b1ba7881dbcb074f36e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;size_t&gt;<sp/><ref refid="structuhd_1_1stream__args__t_1a82f6c25a968b1b1ba7881dbcb074f36e" kindref="member">channels</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="44"><highlight class="normal">}</highlight></codeline>
<codeline lineno="45" refid="gr__uhd__usrp__sink_8h_1a7f8bfc83ec7e75ae71bfc3f95aec6dda" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>INCLUDED_UHD_STREAM_HPP</highlight></codeline>
<codeline lineno="46"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#else</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#<sp/><sp/>define<sp/>GR_UHD_USE_STREAM_API</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classuhd__usrp__sink" kindref="compound">uhd_usrp_sink</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><ref refid="gr__uhd__api_8h_1af9aa018424cf030907c7f8c5a48f4771" kindref="member">GR_UHD_API</ref><sp/>boost::shared_ptr&lt;uhd_usrp_sink&gt;<sp/><ref refid="gr__uhd__usrp__sink_8h_1a06a9e4bc3c337ab6a56fcc6dd1b03cb0" kindref="member" tooltip="Make a new USRP sink block.The USRP sink block reads a stream and transmits the samples. The sink block also provides API calls for transmitter settings.">uhd_make_usrp_sink</ref>(</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::device_addr_t<sp/>&amp;device_addr,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::io_type_t<sp/>&amp;io_type,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>num_channels</highlight></codeline>
<codeline lineno="84"><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><ref refid="gr__uhd__api_8h_1af9aa018424cf030907c7f8c5a48f4771" kindref="member">GR_UHD_API</ref><sp/>boost::shared_ptr&lt;uhd_usrp_sink&gt;<sp/><ref refid="gr__uhd__usrp__sink_8h_1a06a9e4bc3c337ab6a56fcc6dd1b03cb0" kindref="member" tooltip="Make a new USRP sink block.The USRP sink block reads a stream and transmits the samples. The sink block also provides API calls for transmitter settings.">uhd_make_usrp_sink</ref>(</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::device_addr_t<sp/>&amp;device_addr,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structuhd_1_1stream__args__t" kindref="compound">uhd::stream_args_t</ref><sp/>&amp;stream_args</highlight></codeline>
<codeline lineno="115"><highlight class="normal">);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="classuhd__usrp__sink" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="gr__uhd__api_8h_1af9aa018424cf030907c7f8c5a48f4771" kindref="member">GR_UHD_API</ref><sp/><ref refid="classuhd__usrp__sink" kindref="compound">uhd_usrp_sink</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>gr_sync_block{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_start_time(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::time_spec_t<sp/>&amp;time)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::dict&lt;std::string,<sp/>std::string&gt;<sp/>get_usrp_info(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_subdev_spec(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;spec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>get_subdev_spec<sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_samp_rate(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rate)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_samp_rate(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::meta_range_t<sp/>get_samp_rates(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::tune_result_t<sp/>set_center_freq(</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::tune_request_t<sp/>tune_request,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="classuhd__usrp__sink_1a279a28c250e2ae657aa9c43b5742c2fa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uhd::tune_result_t<sp/><ref refid="classuhd__usrp__sink_1a279a28c250e2ae657aa9c43b5742c2fa" kindref="member">set_center_freq</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>freq,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0){</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_center_freq(uhd::tune_request_t(freq),<sp/>chan);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_center_freq(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::freq_range_t<sp/>get_freq_range(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_gain(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gain,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_gain(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gain,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_gain(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_gain(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>get_gain_names(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::gain_range_t<sp/>get_gain_range(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::gain_range_t<sp/>get_gain_range(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_antenna(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;ant,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>get_antenna(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>get_antennas(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_bandwidth(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bandwidth,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_dc_offset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>&amp;offset,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_iq_balance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::complex&lt;double&gt;<sp/>&amp;correction,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::sensor_value_t<sp/>get_sensor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>get_sensor_names(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="classuhd__usrp__sink_1a665ae49a72b19e5e13ac4f49b9671e1f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>uhd::sensor_value_t<sp/><ref refid="classuhd__usrp__sink_1a665ae49a72b19e5e13ac4f49b9671e1f" kindref="member" tooltip="DEPRECATED use get_sensor.">get_dboard_sensor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0){</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;get_sensor(name,<sp/>chan);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="330" refid="classuhd__usrp__sink_1aa126db611dce103dbcf932f0d286cf0a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classuhd__usrp__sink_1aa126db611dce103dbcf932f0d286cf0a" kindref="member" tooltip="DEPRECATED use get_sensor_names.">get_dboard_sensor_names</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0){</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;get_sensor_names(chan);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::sensor_value_t<sp/>get_mboard_sensor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>get_mboard_sensor_names(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_clock_config(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::clock_config_t<sp/>&amp;clock_config,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_time_source(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;source,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>get_time_source(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>get_time_sources(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_clock_source(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/>&amp;source,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>get_clock_source(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;<sp/>get_clock_sources(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>get_clock_rate(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_clock_rate(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rate,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::time_spec_t<sp/>get_time_now(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::time_spec_t<sp/>get_time_last_pps(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_time_now(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::time_spec_t<sp/>&amp;time_spec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_time_next_pps(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::time_spec_t<sp/>&amp;time_spec)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_time_unknown_pps(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::time_spec_t<sp/>&amp;time_spec)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_command_time(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uhd::time_spec_t<sp/>&amp;time_spec,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clear_command_time(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::usrp::dboard_iface::sptr<sp/>get_dboard_iface(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>chan<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uhd::usrp::multi_usrp::sptr<sp/>get_device(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_user_register(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint32_t<sp/>data,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>mboard<sp/>=<sp/>0)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="490"><highlight class="normal">};</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>INCLUDED_GR_UHD_USRP_SINK_H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/alexzh/gr_alex/gnuradio/gr-uhd/include/gr_uhd_usrp_sink.h"/>
  </compounddef>
</doxygen>

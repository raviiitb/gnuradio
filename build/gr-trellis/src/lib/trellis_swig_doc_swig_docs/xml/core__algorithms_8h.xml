<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="core__algorithms_8h" kind="file">
    <compoundname>core_algorithms.h</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">vector</includes>
    <includes local="yes">digital_metric_type.h</includes>
    <includes refid="fsm_8h" local="yes">fsm.h</includes>
    <includes refid="interleaver_8h" local="yes">interleaver.h</includes>
    <includedby refid="trellis__siso__combined__f_8h" local="yes">/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/trellis_siso_combined_f.h</includedby>
    <includedby refid="trellis__siso__f_8h" local="yes">/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/trellis_siso_f.h</includedby>
    <includedby refid="trellis__viterbi__b_8h" local="yes">trellis_viterbi_b.h</includedby>
    <includedby refid="trellis__viterbi__combined__cb_8h" local="yes">trellis_viterbi_combined_cb.h</includedby>
    <includedby refid="trellis__viterbi__combined__ci_8h" local="yes">trellis_viterbi_combined_ci.h</includedby>
    <includedby refid="trellis__viterbi__combined__cs_8h" local="yes">trellis_viterbi_combined_cs.h</includedby>
    <includedby refid="trellis__viterbi__combined__fb_8h" local="yes">trellis_viterbi_combined_fb.h</includedby>
    <includedby refid="trellis__viterbi__combined__fi_8h" local="yes">trellis_viterbi_combined_fi.h</includedby>
    <includedby refid="trellis__viterbi__combined__fs_8h" local="yes">trellis_viterbi_combined_fs.h</includedby>
    <includedby refid="trellis__viterbi__combined__ib_8h" local="yes">trellis_viterbi_combined_ib.h</includedby>
    <includedby refid="trellis__viterbi__combined__ii_8h" local="yes">trellis_viterbi_combined_ii.h</includedby>
    <includedby refid="trellis__viterbi__combined__is_8h" local="yes">trellis_viterbi_combined_is.h</includedby>
    <includedby refid="trellis__viterbi__combined__sb_8h" local="yes">trellis_viterbi_combined_sb.h</includedby>
    <includedby refid="trellis__viterbi__combined__si_8h" local="yes">trellis_viterbi_combined_si.h</includedby>
    <includedby refid="trellis__viterbi__combined__ss_8h" local="yes">trellis_viterbi_combined_ss.h</includedby>
    <includedby refid="trellis__viterbi__i_8h" local="yes">trellis_viterbi_i.h</includedby>
    <includedby refid="trellis__viterbi__s_8h" local="yes">trellis_viterbi_s.h</includedby>
    <incdepgraph>
      <node id="655">
        <label>gruel/attributes.h</label>
      </node>
      <node id="650">
        <label>cmath</label>
      </node>
      <node id="657">
        <label>interleaver.h</label>
        <link refid="interleaver_8h"/>
        <childnode refid="654" relation="include">
        </childnode>
        <childnode refid="651" relation="include">
        </childnode>
      </node>
      <node id="653">
        <label>fsm.h</label>
        <link refid="fsm_8h"/>
        <childnode refid="654" relation="include">
        </childnode>
        <childnode refid="651" relation="include">
        </childnode>
        <childnode refid="656" relation="include">
        </childnode>
      </node>
      <node id="651">
        <label>vector</label>
      </node>
      <node id="649">
        <label>/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/core_algorithms.h</label>
        <link refid="core_algorithms.h"/>
        <childnode refid="650" relation="include">
        </childnode>
        <childnode refid="651" relation="include">
        </childnode>
        <childnode refid="652" relation="include">
        </childnode>
        <childnode refid="653" relation="include">
        </childnode>
        <childnode refid="657" relation="include">
        </childnode>
      </node>
      <node id="654">
        <label>trellis_api.h</label>
        <link refid="trellis__api_8h"/>
        <childnode refid="655" relation="include">
        </childnode>
      </node>
      <node id="656">
        <label>iosfwd</label>
      </node>
      <node id="652">
        <label>digital_metric_type.h</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="662">
        <label>trellis_viterbi_combined_cb.h</label>
        <link refid="trellis__viterbi__combined__cb_8h"/>
      </node>
      <node id="666">
        <label>trellis_viterbi_combined_fi.h</label>
        <link refid="trellis__viterbi__combined__fi_8h"/>
      </node>
      <node id="671">
        <label>trellis_viterbi_combined_sb.h</label>
        <link refid="trellis__viterbi__combined__sb_8h"/>
      </node>
      <node id="659">
        <label>/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/trellis_siso_combined_f.h</label>
        <link refid="trellis__siso__combined__f_8h"/>
      </node>
      <node id="669">
        <label>trellis_viterbi_combined_ii.h</label>
        <link refid="trellis__viterbi__combined__ii_8h"/>
      </node>
      <node id="665">
        <label>trellis_viterbi_combined_fb.h</label>
        <link refid="trellis__viterbi__combined__fb_8h"/>
      </node>
      <node id="675">
        <label>trellis_viterbi_s.h</label>
        <link refid="trellis__viterbi__s_8h"/>
      </node>
      <node id="668">
        <label>trellis_viterbi_combined_ib.h</label>
        <link refid="trellis__viterbi__combined__ib_8h"/>
      </node>
      <node id="658">
        <label>/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/core_algorithms.h</label>
        <link refid="core_algorithms.h"/>
        <childnode refid="659" relation="include">
        </childnode>
        <childnode refid="660" relation="include">
        </childnode>
        <childnode refid="661" relation="include">
        </childnode>
        <childnode refid="662" relation="include">
        </childnode>
        <childnode refid="663" relation="include">
        </childnode>
        <childnode refid="664" relation="include">
        </childnode>
        <childnode refid="665" relation="include">
        </childnode>
        <childnode refid="666" relation="include">
        </childnode>
        <childnode refid="667" relation="include">
        </childnode>
        <childnode refid="668" relation="include">
        </childnode>
        <childnode refid="669" relation="include">
        </childnode>
        <childnode refid="670" relation="include">
        </childnode>
        <childnode refid="671" relation="include">
        </childnode>
        <childnode refid="672" relation="include">
        </childnode>
        <childnode refid="673" relation="include">
        </childnode>
        <childnode refid="674" relation="include">
        </childnode>
        <childnode refid="675" relation="include">
        </childnode>
      </node>
      <node id="664">
        <label>trellis_viterbi_combined_cs.h</label>
        <link refid="trellis__viterbi__combined__cs_8h"/>
      </node>
      <node id="673">
        <label>trellis_viterbi_combined_ss.h</label>
        <link refid="trellis__viterbi__combined__ss_8h"/>
      </node>
      <node id="667">
        <label>trellis_viterbi_combined_fs.h</label>
        <link refid="trellis__viterbi__combined__fs_8h"/>
      </node>
      <node id="661">
        <label>trellis_viterbi_b.h</label>
        <link refid="trellis__viterbi__b_8h"/>
      </node>
      <node id="660">
        <label>/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/trellis_siso_f.h</label>
        <link refid="trellis__siso__f_8h"/>
      </node>
      <node id="663">
        <label>trellis_viterbi_combined_ci.h</label>
        <link refid="trellis__viterbi__combined__ci_8h"/>
      </node>
      <node id="672">
        <label>trellis_viterbi_combined_si.h</label>
        <link refid="trellis__viterbi__combined__si_8h"/>
      </node>
      <node id="670">
        <label>trellis_viterbi_combined_is.h</label>
        <link refid="trellis__viterbi__combined__is_8h"/>
      </node>
      <node id="674">
        <label>trellis_viterbi_i.h</label>
        <link refid="trellis__viterbi__i_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="core__algorithms_8h_1a8ee42a5dd83886e7ad61d451d5a32956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float min</definition>
        <argsstring>(float a, float b)</argsstring>
        <name>min</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/core_algorithms.h" line="34"/>
      </memberdef>
      <memberdef kind="function" id="core__algorithms_8h_1aeaa130a10446a9df57d9a8c3df3609dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>float</type>
        <definition>float min_star</definition>
        <argsstring>(float a, float b)</argsstring>
        <name>min_star</name>
        <param>
          <type>float</type>
          <declname>a</declname>
        </param>
        <param>
          <type>float</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/core_algorithms.h" line="35"/>
      </memberdef>
      <memberdef kind="function" id="core__algorithms_8h_1ac8fe5f61de2cd52149621ebc9ec6cebc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void viterbi_algorithm</definition>
        <argsstring>(int I, int S, int O, const std::vector&lt; int &gt; &amp;NS, const std::vector&lt; int &gt; &amp;OS, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;PS, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;PI, int K, int S0, int SK, const float *in, T *out)</argsstring>
        <name>viterbi_algorithm</name>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>int</type>
          <declname>S</declname>
        </param>
        <param>
          <type>int</type>
          <declname>O</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>NS</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>OS</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>PS</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>PI</declname>
        </param>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <param>
          <type>int</type>
          <declname>S0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>SK</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/core_algorithms.h" line="46"/>
      </memberdef>
      <memberdef kind="function" id="core__algorithms_8h_1a5bf2a8e1a8e33329eb3ee83e66549be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Ti</type>
          </param>
          <param>
            <type>class To</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void viterbi_algorithm_combined</definition>
        <argsstring>(int I, int S, int O, const std::vector&lt; int &gt; &amp;NS, const std::vector&lt; int &gt; &amp;OS, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;PS, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;PI, int K, int S0, int SK, int D, const std::vector&lt; Ti &gt; &amp;TABLE, trellis_metric_type_t TYPE, const Ti *in, To *out)</argsstring>
        <name>viterbi_algorithm_combined</name>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>int</type>
          <declname>S</declname>
        </param>
        <param>
          <type>int</type>
          <declname>O</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>NS</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>OS</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>PS</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>PI</declname>
        </param>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <param>
          <type>int</type>
          <declname>S0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>SK</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>const std::vector&lt; Ti &gt; &amp;</type>
          <declname>TABLE</declname>
        </param>
        <param>
          <type>trellis_metric_type_t</type>
          <declname>TYPE</declname>
        </param>
        <param>
          <type>const Ti *</type>
          <declname>in</declname>
        </param>
        <param>
          <type>To *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/core_algorithms.h" line="60"/>
      </memberdef>
      <memberdef kind="function" id="core__algorithms_8h_1a7bf8321f8d0a3ac7234ed55ceab69ad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void siso_algorithm</definition>
        <argsstring>(int I, int S, int O, const std::vector&lt; int &gt; &amp;NS, const std::vector&lt; int &gt; &amp;OS, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;PS, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;PI, int K, int S0, int SK, bool POSTI, bool POSTO, float(*p2mymin)(float, float), const float *priori, const float *prioro, float *post)</argsstring>
        <name>siso_algorithm</name>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>int</type>
          <declname>S</declname>
        </param>
        <param>
          <type>int</type>
          <declname>O</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>NS</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>OS</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>PS</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>PI</declname>
        </param>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <param>
          <type>int</type>
          <declname>S0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>SK</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>POSTI</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>POSTO</declname>
        </param>
        <param>
          <type>float(*)(float, float)</type>
          <declname>p2mymin</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>priori</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>prioro</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>post</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/core_algorithms.h" line="74"/>
      </memberdef>
      <memberdef kind="function" id="core__algorithms_8h_1aabdff6b3dae1bb3ef0cd940c21b33bbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void siso_algorithm_combined</definition>
        <argsstring>(int I, int S, int O, const std::vector&lt; int &gt; &amp;NS, const std::vector&lt; int &gt; &amp;OS, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;PS, const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;PI, int K, int S0, int SK, bool POSTI, bool POSTO, float(*p2mymin)(float, float), int D, const std::vector&lt; T &gt; &amp;TABLE, trellis_metric_type_t TYPE, const float *priori, const T *observations, float *post)</argsstring>
        <name>siso_algorithm_combined</name>
        <param>
          <type>int</type>
          <declname>I</declname>
        </param>
        <param>
          <type>int</type>
          <declname>S</declname>
        </param>
        <param>
          <type>int</type>
          <declname>O</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>NS</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>OS</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>PS</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; int &gt; &gt; &amp;</type>
          <declname>PI</declname>
        </param>
        <param>
          <type>int</type>
          <declname>K</declname>
        </param>
        <param>
          <type>int</type>
          <declname>S0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>SK</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>POSTI</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>POSTO</declname>
        </param>
        <param>
          <type>float(*)(float, float)</type>
          <declname>p2mymin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>TABLE</declname>
        </param>
        <param>
          <type>trellis_metric_type_t</type>
          <declname>TYPE</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>priori</declname>
        </param>
        <param>
          <type>const T *</type>
          <declname>observations</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>post</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/core_algorithms.h" line="91"/>
      </memberdef>
      <memberdef kind="function" id="core__algorithms_8h_1aae8a8b5aa50a3c5916c42f3b0bde33ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sccc_decoder</definition>
        <argsstring>(const fsm &amp;FSMo, int STo0, int SToK, const fsm &amp;FSMi, int STi0, int STiK, const interleaver &amp;INTERLEAVER, int blocklength, int iterations, float(*p2mymin)(float, float), const float *iprioro, T *data)</argsstring>
        <name>sccc_decoder</name>
        <param>
          <type>const <ref refid="classfsm" kindref="compound">fsm</ref> &amp;</type>
          <declname>FSMo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>STo0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>SToK</declname>
        </param>
        <param>
          <type>const <ref refid="classfsm" kindref="compound">fsm</ref> &amp;</type>
          <declname>FSMi</declname>
        </param>
        <param>
          <type>int</type>
          <declname>STi0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>STiK</declname>
        </param>
        <param>
          <type>const <ref refid="classinterleaver" kindref="compound">interleaver</ref> &amp;</type>
          <declname>INTERLEAVER</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocklength</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type>float(*)(float, float)</type>
          <declname>p2mymin</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>iprioro</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/core_algorithms.h" line="101"/>
      </memberdef>
      <memberdef kind="function" id="core__algorithms_8h_1a0bd16c54c564ca06d6651db616ac3383" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Ti</type>
          </param>
          <param>
            <type>class To</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void sccc_decoder_combined</definition>
        <argsstring>(const fsm &amp;FSMo, int STo0, int SToK, const fsm &amp;FSMi, int STi0, int STiK, const interleaver &amp;INTERLEAVER, int blocklength, int iterations, float(*p2mymin)(float, float), int D, const std::vector&lt; Ti &gt; &amp;TABLE, trellis_metric_type_t METRIC_TYPE, float scaling, const Ti *observations, To *data)</argsstring>
        <name>sccc_decoder_combined</name>
        <param>
          <type>const <ref refid="classfsm" kindref="compound">fsm</ref> &amp;</type>
          <declname>FSMo</declname>
        </param>
        <param>
          <type>int</type>
          <declname>STo0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>SToK</declname>
        </param>
        <param>
          <type>const <ref refid="classfsm" kindref="compound">fsm</ref> &amp;</type>
          <declname>FSMi</declname>
        </param>
        <param>
          <type>int</type>
          <declname>STi0</declname>
        </param>
        <param>
          <type>int</type>
          <declname>STiK</declname>
        </param>
        <param>
          <type>const <ref refid="classinterleaver" kindref="compound">interleaver</ref> &amp;</type>
          <declname>INTERLEAVER</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocklength</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type>float(*)(float, float)</type>
          <declname>p2mymin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>const std::vector&lt; Ti &gt; &amp;</type>
          <declname>TABLE</declname>
        </param>
        <param>
          <type>trellis_metric_type_t</type>
          <declname>METRIC_TYPE</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scaling</declname>
        </param>
        <param>
          <type>const Ti *</type>
          <declname>observations</declname>
        </param>
        <param>
          <type>To *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/core_algorithms.h" line="114"/>
      </memberdef>
      <memberdef kind="function" id="core__algorithms_8h_1ac4d4d6df572a86446e1aa137a0ccf5f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pccc_decoder</definition>
        <argsstring>(const fsm &amp;FSM1, int ST10, int ST1K, const fsm &amp;FSM2, int ST20, int ST2K, const interleaver &amp;INTERLEAVER, int blocklength, int iterations, float(*p2mymin)(float, float), const float *cprioro, T *data)</argsstring>
        <name>pccc_decoder</name>
        <param>
          <type>const <ref refid="classfsm" kindref="compound">fsm</ref> &amp;</type>
          <declname>FSM1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ST10</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ST1K</declname>
        </param>
        <param>
          <type>const <ref refid="classfsm" kindref="compound">fsm</ref> &amp;</type>
          <declname>FSM2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ST20</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ST2K</declname>
        </param>
        <param>
          <type>const <ref refid="classinterleaver" kindref="compound">interleaver</ref> &amp;</type>
          <declname>INTERLEAVER</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocklength</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type>float(*)(float, float)</type>
          <declname>p2mymin</declname>
        </param>
        <param>
          <type>const float *</type>
          <declname>cprioro</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/core_algorithms.h" line="123"/>
      </memberdef>
      <memberdef kind="function" id="core__algorithms_8h_1ae98fcc16657be84269a48d14cc71d440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class Ti</type>
          </param>
          <param>
            <type>class To</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void pccc_decoder_combined</definition>
        <argsstring>(const fsm &amp;FSM1, int ST10, int ST1K, const fsm &amp;FSM2, int ST20, int ST2K, const interleaver &amp;INTERLEAVER, int blocklength, int iterations, float(*p2mymin)(float, float), int D, const std::vector&lt; Ti &gt; &amp;TABLE, trellis_metric_type_t METRIC_TYPE, float scaling, const Ti *observations, To *data)</argsstring>
        <name>pccc_decoder_combined</name>
        <param>
          <type>const <ref refid="classfsm" kindref="compound">fsm</ref> &amp;</type>
          <declname>FSM1</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ST10</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ST1K</declname>
        </param>
        <param>
          <type>const <ref refid="classfsm" kindref="compound">fsm</ref> &amp;</type>
          <declname>FSM2</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ST20</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ST2K</declname>
        </param>
        <param>
          <type>const <ref refid="classinterleaver" kindref="compound">interleaver</ref> &amp;</type>
          <declname>INTERLEAVER</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blocklength</declname>
        </param>
        <param>
          <type>int</type>
          <declname>iterations</declname>
        </param>
        <param>
          <type>float(*)(float, float)</type>
          <declname>p2mymin</declname>
        </param>
        <param>
          <type>int</type>
          <declname>D</declname>
        </param>
        <param>
          <type>const std::vector&lt; Ti &gt; &amp;</type>
          <declname>TABLE</declname>
        </param>
        <param>
          <type>trellis_metric_type_t</type>
          <declname>METRIC_TYPE</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scaling</declname>
        </param>
        <param>
          <type>const Ti *</type>
          <declname>observations</declname>
        </param>
        <param>
          <type>To *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/core_algorithms.h" line="135"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*<sp/>-*-<sp/>c++<sp/>-*-<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>2004<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>is<sp/>part<sp/>of<sp/>GNU<sp/>Radio</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>GNU<sp/>Radio<sp/>is<sp/>free<sp/>software;<sp/>you<sp/>can<sp/>redistribute<sp/>it<sp/>and/or<sp/>modify</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>it<sp/>under<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>as<sp/>published<sp/>by</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation;<sp/>either<sp/>version<sp/>3,<sp/>or<sp/>(at<sp/>your<sp/>option)</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>any<sp/>later<sp/>version.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/>GNU<sp/>Radio<sp/>is<sp/>distributed<sp/>in<sp/>the<sp/>hope<sp/>that<sp/>it<sp/>will<sp/>be<sp/>useful,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/>but<sp/>WITHOUT<sp/>ANY<sp/>WARRANTY;<sp/>without<sp/>even<sp/>the<sp/>implied<sp/>warranty<sp/>of</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/>MERCHANTABILITY<sp/>or<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE.<sp/><sp/>See<sp/>the</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/>GNU<sp/>General<sp/>Public<sp/>License<sp/>for<sp/>more<sp/>details.</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*<sp/>You<sp/>should<sp/>have<sp/>received<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>GNU<sp/>General<sp/>Public<sp/>License</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>along<sp/>with<sp/>GNU<sp/>Radio;<sp/>see<sp/>the<sp/>file<sp/>COPYING.<sp/><sp/>If<sp/>not,<sp/>write<sp/>to</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>the<sp/>Free<sp/>Software<sp/>Foundation,<sp/>Inc.,<sp/>51<sp/>Franklin<sp/>Street,</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>Boston,<sp/>MA<sp/>02110-1301,<sp/>USA.</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>INCLUDED_CORE_ALGORITHMS_H</highlight></codeline>
<codeline lineno="24"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>INCLUDED_CORE_ALGORITHMS_H</highlight></codeline>
<codeline lineno="25"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//#include<sp/>&lt;gr_complex.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;digital_metric_type.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="fsm_8h" kindref="compound">fsm.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="interleaver_8h" kindref="compound">interleaver.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="core__algorithms_8h_1a8ee42a5dd83886e7ad61d451d5a32956" kindref="member">min</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/><ref refid="core__algorithms_8h_1aeaa130a10446a9df57d9a8c3df3609dc" kindref="member">min_star</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>a,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>b);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="core__algorithms_8h_1ac8fe5f61de2cd52149621ebc9ec6cebc" kindref="member">viterbi_algorithm</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>O,</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;NS,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;OS,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>&amp;PS,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>&amp;PI,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>S0,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SK,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*in,<sp/>T<sp/>*out</highlight></codeline>
<codeline lineno="46"><highlight class="normal">);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Ti,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="core__algorithms_8h_1a5bf2a8e1a8e33329eb3ee83e66549be5" kindref="member">viterbi_algorithm_combined</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>O,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;NS,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;OS,</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>&amp;PS,</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>&amp;PI,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>S0,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SK,</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Ti&gt;<sp/>&amp;TABLE,</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trellis_metric_type_t<sp/>TYPE,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ti<sp/>*in,<sp/>To<sp/>*out</highlight></codeline>
<codeline lineno="60"><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="core__algorithms_8h_1a7bf8321f8d0a3ac7234ed55ceab69ad6" kindref="member">siso_algorithm</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>O,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;NS,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;OS,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>&amp;PS,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>&amp;PI,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>S0,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SK,</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>POSTI,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>POSTO,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>(*p2mymin)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*priori,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*prioro,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*post</highlight></codeline>
<codeline lineno="74"><highlight class="normal">);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="core__algorithms_8h_1aabdff6b3dae1bb3ef0cd940c21b33bbf" kindref="member">siso_algorithm_combined</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>S,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>O,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;NS,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/>&amp;OS,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>&amp;PS,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<sp/>std::vector&lt;int&gt;<sp/>&gt;<sp/>&amp;PI,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>K,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>S0,</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SK,</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>POSTI,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>POSTO,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>(*p2mymin)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;T&gt;<sp/>&amp;TABLE,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trellis_metric_type_t<sp/>TYPE,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*priori,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T<sp/>*observations,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*post</highlight></codeline>
<codeline lineno="91"><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="core__algorithms_8h_1aae8a8b5aa50a3c5916c42f3b0bde33ca" kindref="member">sccc_decoder</ref>(</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfsm" kindref="compound" tooltip="Finite State Machine Specification class.">fsm</ref><sp/>&amp;FSMo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>STo0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SToK,</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfsm" kindref="compound" tooltip="Finite State Machine Specification class.">fsm</ref><sp/>&amp;FSMi,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>STi0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>STiK,</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classinterleaver" kindref="compound" tooltip="INTERLEAVER class.">interleaver</ref><sp/>&amp;INTERLEAVER,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocklength,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>(*p2mymin)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*iprioro,<sp/>T<sp/>*data</highlight></codeline>
<codeline lineno="101"><highlight class="normal">);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Ti,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="core__algorithms_8h_1a0bd16c54c564ca06d6651db616ac3383" kindref="member">sccc_decoder_combined</ref>(</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfsm" kindref="compound" tooltip="Finite State Machine Specification class.">fsm</ref><sp/>&amp;FSMo,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>STo0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SToK,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfsm" kindref="compound" tooltip="Finite State Machine Specification class.">fsm</ref><sp/>&amp;FSMi,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>STi0,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>STiK,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classinterleaver" kindref="compound" tooltip="INTERLEAVER class.">interleaver</ref><sp/>&amp;INTERLEAVER,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocklength,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>(*p2mymin)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Ti&gt;<sp/>&amp;TABLE,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trellis_metric_type_t<sp/>METRIC_TYPE,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scaling,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ti<sp/>*observations,<sp/>To<sp/>*data</highlight></codeline>
<codeline lineno="114"><highlight class="normal">);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="core__algorithms_8h_1ac4d4d6df572a86446e1aa137a0ccf5f5" kindref="member">pccc_decoder</ref>(</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfsm" kindref="compound" tooltip="Finite State Machine Specification class.">fsm</ref><sp/>&amp;FSM1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ST10,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ST1K,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfsm" kindref="compound" tooltip="Finite State Machine Specification class.">fsm</ref><sp/>&amp;FSM2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ST20,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ST2K,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classinterleaver" kindref="compound" tooltip="INTERLEAVER class.">interleaver</ref><sp/>&amp;INTERLEAVER,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocklength,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>(*p2mymin)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>*cprioro,<sp/>T<sp/>*data</highlight></codeline>
<codeline lineno="123"><highlight class="normal">);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Ti,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="core__algorithms_8h_1ae98fcc16657be84269a48d14cc71d440" kindref="member">pccc_decoder_combined</ref>(</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfsm" kindref="compound" tooltip="Finite State Machine Specification class.">fsm</ref><sp/>&amp;FSM1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ST10,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ST1K,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classfsm" kindref="compound" tooltip="Finite State Machine Specification class.">fsm</ref><sp/>&amp;FSM2,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ST20,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ST2K,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classinterleaver" kindref="compound" tooltip="INTERLEAVER class.">interleaver</ref><sp/>&amp;INTERLEAVER,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blocklength,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>iterations,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>(*p2mymin)(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">),</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>D,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;Ti&gt;<sp/>&amp;TABLE,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>trellis_metric_type_t<sp/>METRIC_TYPE,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scaling,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Ti<sp/>*observations,<sp/>To<sp/>*data</highlight></codeline>
<codeline lineno="135"><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/alexzh/gr_alex/gnuradio/gr-trellis/src/lib/core_algorithms.h"/>
  </compounddef>
</doxygen>
